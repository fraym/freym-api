// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.27.3
// source: sync/management/peer_nodes.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface GetPeerNodesRequest {
    app: string;
}

export interface GetPeerNodesResponse {
    peerNodeIp: string[];
}

function createBaseGetPeerNodesRequest(): GetPeerNodesRequest {
    return { app: "" };
}

export const GetPeerNodesRequest: MessageFns<GetPeerNodesRequest> = {
    encode(message: GetPeerNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.app !== "") {
            writer.uint32(10).string(message.app);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetPeerNodesRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPeerNodesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetPeerNodesRequest {
        return { app: isSet(object.app) ? globalThis.String(object.app) : "" };
    },

    toJSON(message: GetPeerNodesRequest): unknown {
        const obj: any = {};
        if (message.app !== "") {
            obj.app = message.app;
        }
        return obj;
    },

    create(base?: DeepPartial<GetPeerNodesRequest>): GetPeerNodesRequest {
        return GetPeerNodesRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetPeerNodesRequest>): GetPeerNodesRequest {
        const message = createBaseGetPeerNodesRequest();
        message.app = object.app ?? "";
        return message;
    },
};

function createBaseGetPeerNodesResponse(): GetPeerNodesResponse {
    return { peerNodeIp: [] };
}

export const GetPeerNodesResponse: MessageFns<GetPeerNodesResponse> = {
    encode(message: GetPeerNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        for (const v of message.peerNodeIp) {
            writer.uint32(10).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetPeerNodesResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPeerNodesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.peerNodeIp.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetPeerNodesResponse {
        return {
            peerNodeIp: globalThis.Array.isArray(object?.peerNodeIp)
                ? object.peerNodeIp.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: GetPeerNodesResponse): unknown {
        const obj: any = {};
        if (message.peerNodeIp?.length) {
            obj.peerNodeIp = message.peerNodeIp;
        }
        return obj;
    },

    create(base?: DeepPartial<GetPeerNodesResponse>): GetPeerNodesResponse {
        return GetPeerNodesResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetPeerNodesResponse>): GetPeerNodesResponse {
        const message = createBaseGetPeerNodesResponse();
        message.peerNodeIp = object.peerNodeIp?.map(e => e) || [];
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
