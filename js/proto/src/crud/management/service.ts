// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: crud/management/service.proto
import {
    type CallOptions,
    ChannelCredentials,
    Client,
    type ClientOptions,
    type ClientUnaryCall,
    Metadata,
    type ServiceError,
    type UntypedServiceImplementation,
    type handleUnaryCall,
    makeGenericClientConstructor,
} from "@grpc/grpc-js";
import {
    ConfirmSchemaRequest,
    ConfirmSchemaResponse,
    DeploySchemaRequest,
    DeploySchemaResponse,
    GetSchemaDeploymentRequest,
    GetSchemaDeploymentResponse,
    RollbackSchemaRequest,
    RollbackSchemaResponse,
} from "./migration";

export type ServiceService = typeof ServiceService;
export const ServiceService = {
    deploySchema: {
        path: "/freym.crud.management.Service/DeploySchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: DeploySchemaRequest) =>
            Buffer.from(DeploySchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => DeploySchemaRequest.decode(value),
        responseSerialize: (value: DeploySchemaResponse) =>
            Buffer.from(DeploySchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => DeploySchemaResponse.decode(value),
    },
    confirmSchema: {
        path: "/freym.crud.management.Service/ConfirmSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: ConfirmSchemaRequest) =>
            Buffer.from(ConfirmSchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => ConfirmSchemaRequest.decode(value),
        responseSerialize: (value: ConfirmSchemaResponse) =>
            Buffer.from(ConfirmSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => ConfirmSchemaResponse.decode(value),
    },
    rollbackSchema: {
        path: "/freym.crud.management.Service/RollbackSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: RollbackSchemaRequest) =>
            Buffer.from(RollbackSchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => RollbackSchemaRequest.decode(value),
        responseSerialize: (value: RollbackSchemaResponse) =>
            Buffer.from(RollbackSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => RollbackSchemaResponse.decode(value),
    },
    getSchemaDeployment: {
        path: "/freym.crud.management.Service/GetSchemaDeployment",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetSchemaDeploymentRequest) =>
            Buffer.from(GetSchemaDeploymentRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetSchemaDeploymentRequest.decode(value),
        responseSerialize: (value: GetSchemaDeploymentResponse) =>
            Buffer.from(GetSchemaDeploymentResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => GetSchemaDeploymentResponse.decode(value),
    },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
    deploySchema: handleUnaryCall<DeploySchemaRequest, DeploySchemaResponse>;
    confirmSchema: handleUnaryCall<ConfirmSchemaRequest, ConfirmSchemaResponse>;
    rollbackSchema: handleUnaryCall<RollbackSchemaRequest, RollbackSchemaResponse>;
    getSchemaDeployment: handleUnaryCall<GetSchemaDeploymentRequest, GetSchemaDeploymentResponse>;
}

export interface ServiceClient extends Client {
    deploySchema(
        request: DeploySchemaRequest,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    deploySchema(
        request: DeploySchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    deploySchema(
        request: DeploySchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(
    ServiceService,
    "freym.crud.management.Service"
) as unknown as {
    new (
        address: string,
        credentials: ChannelCredentials,
        options?: Partial<ClientOptions>
    ): ServiceClient;
    service: typeof ServiceService;
    serviceName: string;
};
