// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: crud/delivery/update.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AuthData, DataFilter, EventMetadata } from "./shared";

export interface UpdateRequest {
    type: string;
    auth: AuthData | undefined;
    id: string;
    data: { [key: string]: string };
    eventMetadata: EventMetadata | undefined;
}

export interface UpdateRequest_DataEntry {
    key: string;
    value: string;
}

export interface UpdateResponse {
    newData: { [key: string]: string };
    validationErrors: string[];
    fieldValidationErrors: { [key: string]: string };
}

export interface UpdateResponse_NewDataEntry {
    key: string;
    value: string;
}

export interface UpdateResponse_FieldValidationErrorsEntry {
    key: string;
    value: string;
}

export interface UpdateByFilterRequest {
    type: string;
    auth: AuthData | undefined;
    filter: DataFilter | undefined;
    data: { [key: string]: string };
    eventMetadata: EventMetadata | undefined;
}

export interface UpdateByFilterRequest_DataEntry {
    key: string;
    value: string;
}

export interface UpdateByFilterResponse {
    numberOfUpdatedEntries: string;
    validationErrors: { [key: string]: UpdateByFilterValidationResponse };
}

export interface UpdateByFilterResponse_ValidationErrorsEntry {
    key: string;
    value: UpdateByFilterValidationResponse | undefined;
}

export interface UpdateByFilterValidationResponse {
    validationErrors: string[];
    fieldValidationErrors: { [key: string]: string };
}

export interface UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
    key: string;
    value: string;
}

function createBaseUpdateRequest(): UpdateRequest {
    return { type: "", auth: undefined, id: "", data: {}, eventMetadata: undefined };
}

export const UpdateRequest: MessageFns<UpdateRequest> = {
    encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.auth !== undefined) {
            AuthData.encode(message.auth, writer.uint32(18).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        Object.entries(message.data).forEach(([key, value]) => {
            UpdateRequest_DataEntry.encode(
                { key: key as any, value },
                writer.uint32(34).fork()
            ).join();
        });
        if (message.eventMetadata !== undefined) {
            EventMetadata.encode(message.eventMetadata, writer.uint32(42).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.auth = AuthData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    const entry4 = UpdateRequest_DataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.data[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.eventMetadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateRequest {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            auth: isSet(object.auth) ? AuthData.fromJSON(object.auth) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            data: isObject(object.data)
                ? Object.entries(object.data).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
            eventMetadata: isSet(object.eventMetadata)
                ? EventMetadata.fromJSON(object.eventMetadata)
                : undefined,
        };
    },

    toJSON(message: UpdateRequest): unknown {
        const obj: any = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.auth !== undefined) {
            obj.auth = AuthData.toJSON(message.auth);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.data) {
            const entries = Object.entries(message.data);
            if (entries.length > 0) {
                obj.data = {};
                entries.forEach(([k, v]) => {
                    obj.data[k] = v;
                });
            }
        }
        if (message.eventMetadata !== undefined) {
            obj.eventMetadata = EventMetadata.toJSON(message.eventMetadata);
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateRequest>): UpdateRequest {
        return UpdateRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateRequest>): UpdateRequest {
        const message = createBaseUpdateRequest();
        message.type = object.type ?? "";
        message.auth =
            object.auth !== undefined && object.auth !== null
                ? AuthData.fromPartial(object.auth)
                : undefined;
        message.id = object.id ?? "";
        message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        message.eventMetadata =
            object.eventMetadata !== undefined && object.eventMetadata !== null
                ? EventMetadata.fromPartial(object.eventMetadata)
                : undefined;
        return message;
    },
};

function createBaseUpdateRequest_DataEntry(): UpdateRequest_DataEntry {
    return { key: "", value: "" };
}

export const UpdateRequest_DataEntry: MessageFns<UpdateRequest_DataEntry> = {
    encode(
        message: UpdateRequest_DataEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest_DataEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateRequest_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateRequest_DataEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: UpdateRequest_DataEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateRequest_DataEntry>): UpdateRequest_DataEntry {
        return UpdateRequest_DataEntry.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateRequest_DataEntry>): UpdateRequest_DataEntry {
        const message = createBaseUpdateRequest_DataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseUpdateResponse(): UpdateResponse {
    return { newData: {}, validationErrors: [], fieldValidationErrors: {} };
}

export const UpdateResponse: MessageFns<UpdateResponse> = {
    encode(message: UpdateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        Object.entries(message.newData).forEach(([key, value]) => {
            UpdateResponse_NewDataEntry.encode(
                { key: key as any, value },
                writer.uint32(10).fork()
            ).join();
        });
        for (const v of message.validationErrors) {
            writer.uint32(18).string(v!);
        }
        Object.entries(message.fieldValidationErrors).forEach(([key, value]) => {
            UpdateResponse_FieldValidationErrorsEntry.encode(
                { key: key as any, value },
                writer.uint32(26).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    const entry1 = UpdateResponse_NewDataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.newData[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.validationErrors.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    const entry3 = UpdateResponse_FieldValidationErrorsEntry.decode(
                        reader,
                        reader.uint32()
                    );
                    if (entry3.value !== undefined) {
                        message.fieldValidationErrors[entry3.key] = entry3.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateResponse {
        return {
            newData: isObject(object.newData)
                ? Object.entries(object.newData).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
            validationErrors: globalThis.Array.isArray(object?.validationErrors)
                ? object.validationErrors.map((e: any) => globalThis.String(e))
                : [],
            fieldValidationErrors: isObject(object.fieldValidationErrors)
                ? Object.entries(object.fieldValidationErrors).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
        };
    },

    toJSON(message: UpdateResponse): unknown {
        const obj: any = {};
        if (message.newData) {
            const entries = Object.entries(message.newData);
            if (entries.length > 0) {
                obj.newData = {};
                entries.forEach(([k, v]) => {
                    obj.newData[k] = v;
                });
            }
        }
        if (message.validationErrors?.length) {
            obj.validationErrors = message.validationErrors;
        }
        if (message.fieldValidationErrors) {
            const entries = Object.entries(message.fieldValidationErrors);
            if (entries.length > 0) {
                obj.fieldValidationErrors = {};
                entries.forEach(([k, v]) => {
                    obj.fieldValidationErrors[k] = v;
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateResponse>): UpdateResponse {
        return UpdateResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateResponse>): UpdateResponse {
        const message = createBaseUpdateResponse();
        message.newData = Object.entries(object.newData ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        message.validationErrors = object.validationErrors?.map(e => e) || [];
        message.fieldValidationErrors = Object.entries(object.fieldValidationErrors ?? {}).reduce<{
            [key: string]: string;
        }>((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};

function createBaseUpdateResponse_NewDataEntry(): UpdateResponse_NewDataEntry {
    return { key: "", value: "" };
}

export const UpdateResponse_NewDataEntry: MessageFns<UpdateResponse_NewDataEntry> = {
    encode(
        message: UpdateResponse_NewDataEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateResponse_NewDataEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateResponse_NewDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateResponse_NewDataEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: UpdateResponse_NewDataEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateResponse_NewDataEntry>): UpdateResponse_NewDataEntry {
        return UpdateResponse_NewDataEntry.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateResponse_NewDataEntry>): UpdateResponse_NewDataEntry {
        const message = createBaseUpdateResponse_NewDataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseUpdateResponse_FieldValidationErrorsEntry(): UpdateResponse_FieldValidationErrorsEntry {
    return { key: "", value: "" };
}

export const UpdateResponse_FieldValidationErrorsEntry: MessageFns<UpdateResponse_FieldValidationErrorsEntry> =
    {
        encode(
            message: UpdateResponse_FieldValidationErrorsEntry,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.key !== "") {
                writer.uint32(10).string(message.key);
            }
            if (message.value !== "") {
                writer.uint32(18).string(message.value);
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): UpdateResponse_FieldValidationErrorsEntry {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseUpdateResponse_FieldValidationErrorsEntry();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 10) {
                            break;
                        }

                        message.key = reader.string();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.value = reader.string();
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): UpdateResponse_FieldValidationErrorsEntry {
            return {
                key: isSet(object.key) ? globalThis.String(object.key) : "",
                value: isSet(object.value) ? globalThis.String(object.value) : "",
            };
        },

        toJSON(message: UpdateResponse_FieldValidationErrorsEntry): unknown {
            const obj: any = {};
            if (message.key !== "") {
                obj.key = message.key;
            }
            if (message.value !== "") {
                obj.value = message.value;
            }
            return obj;
        },

        create(
            base?: DeepPartial<UpdateResponse_FieldValidationErrorsEntry>
        ): UpdateResponse_FieldValidationErrorsEntry {
            return UpdateResponse_FieldValidationErrorsEntry.fromPartial(base ?? {});
        },
        fromPartial(
            object: DeepPartial<UpdateResponse_FieldValidationErrorsEntry>
        ): UpdateResponse_FieldValidationErrorsEntry {
            const message = createBaseUpdateResponse_FieldValidationErrorsEntry();
            message.key = object.key ?? "";
            message.value = object.value ?? "";
            return message;
        },
    };

function createBaseUpdateByFilterRequest(): UpdateByFilterRequest {
    return { type: "", auth: undefined, filter: undefined, data: {}, eventMetadata: undefined };
}

export const UpdateByFilterRequest: MessageFns<UpdateByFilterRequest> = {
    encode(
        message: UpdateByFilterRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.auth !== undefined) {
            AuthData.encode(message.auth, writer.uint32(18).fork()).join();
        }
        if (message.filter !== undefined) {
            DataFilter.encode(message.filter, writer.uint32(26).fork()).join();
        }
        Object.entries(message.data).forEach(([key, value]) => {
            UpdateByFilterRequest_DataEntry.encode(
                { key: key as any, value },
                writer.uint32(34).fork()
            ).join();
        });
        if (message.eventMetadata !== undefined) {
            EventMetadata.encode(message.eventMetadata, writer.uint32(42).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateByFilterRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateByFilterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.auth = AuthData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.filter = DataFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    const entry4 = UpdateByFilterRequest_DataEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.data[entry4.key] = entry4.value;
                    }
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.eventMetadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateByFilterRequest {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            auth: isSet(object.auth) ? AuthData.fromJSON(object.auth) : undefined,
            filter: isSet(object.filter) ? DataFilter.fromJSON(object.filter) : undefined,
            data: isObject(object.data)
                ? Object.entries(object.data).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
            eventMetadata: isSet(object.eventMetadata)
                ? EventMetadata.fromJSON(object.eventMetadata)
                : undefined,
        };
    },

    toJSON(message: UpdateByFilterRequest): unknown {
        const obj: any = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.auth !== undefined) {
            obj.auth = AuthData.toJSON(message.auth);
        }
        if (message.filter !== undefined) {
            obj.filter = DataFilter.toJSON(message.filter);
        }
        if (message.data) {
            const entries = Object.entries(message.data);
            if (entries.length > 0) {
                obj.data = {};
                entries.forEach(([k, v]) => {
                    obj.data[k] = v;
                });
            }
        }
        if (message.eventMetadata !== undefined) {
            obj.eventMetadata = EventMetadata.toJSON(message.eventMetadata);
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateByFilterRequest>): UpdateByFilterRequest {
        return UpdateByFilterRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateByFilterRequest>): UpdateByFilterRequest {
        const message = createBaseUpdateByFilterRequest();
        message.type = object.type ?? "";
        message.auth =
            object.auth !== undefined && object.auth !== null
                ? AuthData.fromPartial(object.auth)
                : undefined;
        message.filter =
            object.filter !== undefined && object.filter !== null
                ? DataFilter.fromPartial(object.filter)
                : undefined;
        message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        message.eventMetadata =
            object.eventMetadata !== undefined && object.eventMetadata !== null
                ? EventMetadata.fromPartial(object.eventMetadata)
                : undefined;
        return message;
    },
};

function createBaseUpdateByFilterRequest_DataEntry(): UpdateByFilterRequest_DataEntry {
    return { key: "", value: "" };
}

export const UpdateByFilterRequest_DataEntry: MessageFns<UpdateByFilterRequest_DataEntry> = {
    encode(
        message: UpdateByFilterRequest_DataEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateByFilterRequest_DataEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateByFilterRequest_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateByFilterRequest_DataEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: UpdateByFilterRequest_DataEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateByFilterRequest_DataEntry>): UpdateByFilterRequest_DataEntry {
        return UpdateByFilterRequest_DataEntry.fromPartial(base ?? {});
    },
    fromPartial(
        object: DeepPartial<UpdateByFilterRequest_DataEntry>
    ): UpdateByFilterRequest_DataEntry {
        const message = createBaseUpdateByFilterRequest_DataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseUpdateByFilterResponse(): UpdateByFilterResponse {
    return { numberOfUpdatedEntries: "0", validationErrors: {} };
}

export const UpdateByFilterResponse: MessageFns<UpdateByFilterResponse> = {
    encode(
        message: UpdateByFilterResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.numberOfUpdatedEntries !== "0") {
            writer.uint32(8).int64(message.numberOfUpdatedEntries);
        }
        Object.entries(message.validationErrors).forEach(([key, value]) => {
            UpdateByFilterResponse_ValidationErrorsEntry.encode(
                { key: key as any, value },
                writer.uint32(18).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateByFilterResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateByFilterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.numberOfUpdatedEntries = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    const entry2 = UpdateByFilterResponse_ValidationErrorsEntry.decode(
                        reader,
                        reader.uint32()
                    );
                    if (entry2.value !== undefined) {
                        message.validationErrors[entry2.key] = entry2.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateByFilterResponse {
        return {
            numberOfUpdatedEntries: isSet(object.numberOfUpdatedEntries)
                ? globalThis.String(object.numberOfUpdatedEntries)
                : "0",
            validationErrors: isObject(object.validationErrors)
                ? Object.entries(object.validationErrors).reduce<{
                      [key: string]: UpdateByFilterValidationResponse;
                  }>((acc, [key, value]) => {
                      acc[key] = UpdateByFilterValidationResponse.fromJSON(value);
                      return acc;
                  }, {})
                : {},
        };
    },

    toJSON(message: UpdateByFilterResponse): unknown {
        const obj: any = {};
        if (message.numberOfUpdatedEntries !== "0") {
            obj.numberOfUpdatedEntries = message.numberOfUpdatedEntries;
        }
        if (message.validationErrors) {
            const entries = Object.entries(message.validationErrors);
            if (entries.length > 0) {
                obj.validationErrors = {};
                entries.forEach(([k, v]) => {
                    obj.validationErrors[k] = UpdateByFilterValidationResponse.toJSON(v);
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateByFilterResponse>): UpdateByFilterResponse {
        return UpdateByFilterResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateByFilterResponse>): UpdateByFilterResponse {
        const message = createBaseUpdateByFilterResponse();
        message.numberOfUpdatedEntries = object.numberOfUpdatedEntries ?? "0";
        message.validationErrors = Object.entries(object.validationErrors ?? {}).reduce<{
            [key: string]: UpdateByFilterValidationResponse;
        }>((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = UpdateByFilterValidationResponse.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};

function createBaseUpdateByFilterResponse_ValidationErrorsEntry(): UpdateByFilterResponse_ValidationErrorsEntry {
    return { key: "", value: undefined };
}

export const UpdateByFilterResponse_ValidationErrorsEntry: MessageFns<UpdateByFilterResponse_ValidationErrorsEntry> =
    {
        encode(
            message: UpdateByFilterResponse_ValidationErrorsEntry,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.key !== "") {
                writer.uint32(10).string(message.key);
            }
            if (message.value !== undefined) {
                UpdateByFilterValidationResponse.encode(
                    message.value,
                    writer.uint32(18).fork()
                ).join();
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): UpdateByFilterResponse_ValidationErrorsEntry {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseUpdateByFilterResponse_ValidationErrorsEntry();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 10) {
                            break;
                        }

                        message.key = reader.string();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.value = UpdateByFilterValidationResponse.decode(
                            reader,
                            reader.uint32()
                        );
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): UpdateByFilterResponse_ValidationErrorsEntry {
            return {
                key: isSet(object.key) ? globalThis.String(object.key) : "",
                value: isSet(object.value)
                    ? UpdateByFilterValidationResponse.fromJSON(object.value)
                    : undefined,
            };
        },

        toJSON(message: UpdateByFilterResponse_ValidationErrorsEntry): unknown {
            const obj: any = {};
            if (message.key !== "") {
                obj.key = message.key;
            }
            if (message.value !== undefined) {
                obj.value = UpdateByFilterValidationResponse.toJSON(message.value);
            }
            return obj;
        },

        create(
            base?: DeepPartial<UpdateByFilterResponse_ValidationErrorsEntry>
        ): UpdateByFilterResponse_ValidationErrorsEntry {
            return UpdateByFilterResponse_ValidationErrorsEntry.fromPartial(base ?? {});
        },
        fromPartial(
            object: DeepPartial<UpdateByFilterResponse_ValidationErrorsEntry>
        ): UpdateByFilterResponse_ValidationErrorsEntry {
            const message = createBaseUpdateByFilterResponse_ValidationErrorsEntry();
            message.key = object.key ?? "";
            message.value =
                object.value !== undefined && object.value !== null
                    ? UpdateByFilterValidationResponse.fromPartial(object.value)
                    : undefined;
            return message;
        },
    };

function createBaseUpdateByFilterValidationResponse(): UpdateByFilterValidationResponse {
    return { validationErrors: [], fieldValidationErrors: {} };
}

export const UpdateByFilterValidationResponse: MessageFns<UpdateByFilterValidationResponse> = {
    encode(
        message: UpdateByFilterValidationResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        for (const v of message.validationErrors) {
            writer.uint32(10).string(v!);
        }
        Object.entries(message.fieldValidationErrors).forEach(([key, value]) => {
            UpdateByFilterValidationResponse_FieldValidationErrorsEntry.encode(
                { key: key as any, value },
                writer.uint32(18).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateByFilterValidationResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateByFilterValidationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.validationErrors.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    const entry2 =
                        UpdateByFilterValidationResponse_FieldValidationErrorsEntry.decode(
                            reader,
                            reader.uint32()
                        );
                    if (entry2.value !== undefined) {
                        message.fieldValidationErrors[entry2.key] = entry2.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateByFilterValidationResponse {
        return {
            validationErrors: globalThis.Array.isArray(object?.validationErrors)
                ? object.validationErrors.map((e: any) => globalThis.String(e))
                : [],
            fieldValidationErrors: isObject(object.fieldValidationErrors)
                ? Object.entries(object.fieldValidationErrors).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
        };
    },

    toJSON(message: UpdateByFilterValidationResponse): unknown {
        const obj: any = {};
        if (message.validationErrors?.length) {
            obj.validationErrors = message.validationErrors;
        }
        if (message.fieldValidationErrors) {
            const entries = Object.entries(message.fieldValidationErrors);
            if (entries.length > 0) {
                obj.fieldValidationErrors = {};
                entries.forEach(([k, v]) => {
                    obj.fieldValidationErrors[k] = v;
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateByFilterValidationResponse>): UpdateByFilterValidationResponse {
        return UpdateByFilterValidationResponse.fromPartial(base ?? {});
    },
    fromPartial(
        object: DeepPartial<UpdateByFilterValidationResponse>
    ): UpdateByFilterValidationResponse {
        const message = createBaseUpdateByFilterValidationResponse();
        message.validationErrors = object.validationErrors?.map(e => e) || [];
        message.fieldValidationErrors = Object.entries(object.fieldValidationErrors ?? {}).reduce<{
            [key: string]: string;
        }>((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};

function createBaseUpdateByFilterValidationResponse_FieldValidationErrorsEntry(): UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
    return { key: "", value: "" };
}

export const UpdateByFilterValidationResponse_FieldValidationErrorsEntry: MessageFns<UpdateByFilterValidationResponse_FieldValidationErrorsEntry> =
    {
        encode(
            message: UpdateByFilterValidationResponse_FieldValidationErrorsEntry,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.key !== "") {
                writer.uint32(10).string(message.key);
            }
            if (message.value !== "") {
                writer.uint32(18).string(message.value);
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseUpdateByFilterValidationResponse_FieldValidationErrorsEntry();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 10) {
                            break;
                        }

                        message.key = reader.string();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.value = reader.string();
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
            return {
                key: isSet(object.key) ? globalThis.String(object.key) : "",
                value: isSet(object.value) ? globalThis.String(object.value) : "",
            };
        },

        toJSON(message: UpdateByFilterValidationResponse_FieldValidationErrorsEntry): unknown {
            const obj: any = {};
            if (message.key !== "") {
                obj.key = message.key;
            }
            if (message.value !== "") {
                obj.value = message.value;
            }
            return obj;
        },

        create(
            base?: DeepPartial<UpdateByFilterValidationResponse_FieldValidationErrorsEntry>
        ): UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
            return UpdateByFilterValidationResponse_FieldValidationErrorsEntry.fromPartial(
                base ?? {}
            );
        },
        fromPartial(
            object: DeepPartial<UpdateByFilterValidationResponse_FieldValidationErrorsEntry>
        ): UpdateByFilterValidationResponse_FieldValidationErrorsEntry {
            const message = createBaseUpdateByFilterValidationResponse_FieldValidationErrorsEntry();
            message.key = object.key ?? "";
            message.value = object.value ?? "";
            return message;
        },
    };

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isObject(value: any): boolean {
    return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
