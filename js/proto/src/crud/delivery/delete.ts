// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: crud/delivery/delete.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AuthData, DataFilter, EventMetadata } from "./shared";

export interface DeleteRequest {
    type: string;
    auth: AuthData | undefined;
    id: string;
    filter: DataFilter | undefined;
    eventMetadata: EventMetadata | undefined;
}

export interface DeleteResponse {
    numberOfDeletedEntries: string;
}

function createBaseDeleteRequest(): DeleteRequest {
    return { type: "", auth: undefined, id: "", filter: undefined, eventMetadata: undefined };
}

export const DeleteRequest: MessageFns<DeleteRequest> = {
    encode(message: DeleteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.auth !== undefined) {
            AuthData.encode(message.auth, writer.uint32(18).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.filter !== undefined) {
            DataFilter.encode(message.filter, writer.uint32(34).fork()).join();
        }
        if (message.eventMetadata !== undefined) {
            EventMetadata.encode(message.eventMetadata, writer.uint32(42).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeleteRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.auth = AuthData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.filter = DataFilter.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.eventMetadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): DeleteRequest {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            auth: isSet(object.auth) ? AuthData.fromJSON(object.auth) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            filter: isSet(object.filter) ? DataFilter.fromJSON(object.filter) : undefined,
            eventMetadata: isSet(object.eventMetadata)
                ? EventMetadata.fromJSON(object.eventMetadata)
                : undefined,
        };
    },

    toJSON(message: DeleteRequest): unknown {
        const obj: any = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.auth !== undefined) {
            obj.auth = AuthData.toJSON(message.auth);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.filter !== undefined) {
            obj.filter = DataFilter.toJSON(message.filter);
        }
        if (message.eventMetadata !== undefined) {
            obj.eventMetadata = EventMetadata.toJSON(message.eventMetadata);
        }
        return obj;
    },

    create(base?: DeepPartial<DeleteRequest>): DeleteRequest {
        return DeleteRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<DeleteRequest>): DeleteRequest {
        const message = createBaseDeleteRequest();
        message.type = object.type ?? "";
        message.auth =
            object.auth !== undefined && object.auth !== null
                ? AuthData.fromPartial(object.auth)
                : undefined;
        message.id = object.id ?? "";
        message.filter =
            object.filter !== undefined && object.filter !== null
                ? DataFilter.fromPartial(object.filter)
                : undefined;
        message.eventMetadata =
            object.eventMetadata !== undefined && object.eventMetadata !== null
                ? EventMetadata.fromPartial(object.eventMetadata)
                : undefined;
        return message;
    },
};

function createBaseDeleteResponse(): DeleteResponse {
    return { numberOfDeletedEntries: "0" };
}

export const DeleteResponse: MessageFns<DeleteResponse> = {
    encode(message: DeleteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.numberOfDeletedEntries !== "0") {
            writer.uint32(8).int64(message.numberOfDeletedEntries);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeleteResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeleteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.numberOfDeletedEntries = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): DeleteResponse {
        return {
            numberOfDeletedEntries: isSet(object.numberOfDeletedEntries)
                ? globalThis.String(object.numberOfDeletedEntries)
                : "0",
        };
    },

    toJSON(message: DeleteResponse): unknown {
        const obj: any = {};
        if (message.numberOfDeletedEntries !== "0") {
            obj.numberOfDeletedEntries = message.numberOfDeletedEntries;
        }
        return obj;
    },

    create(base?: DeepPartial<DeleteResponse>): DeleteResponse {
        return DeleteResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<DeleteResponse>): DeleteResponse {
        const message = createBaseDeleteResponse();
        message.numberOfDeletedEntries = object.numberOfDeletedEntries ?? "0";
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
