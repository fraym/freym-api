// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: crud/delivery/clone.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { AuthData, EventMetadata } from "./shared";

export interface CloneRequest {
    type: string;
    auth: AuthData | undefined;
    id: string;
    newId: string;
    data: { [key: string]: string };
    eventMetadata: EventMetadata | undefined;
}

export interface CloneRequest_DataEntry {
    key: string;
    value: string;
}

export interface CloneResponse {
    newData: { [key: string]: string };
    validationErrors: string[];
    fieldValidationErrors: { [key: string]: string };
}

export interface CloneResponse_NewDataEntry {
    key: string;
    value: string;
}

export interface CloneResponse_FieldValidationErrorsEntry {
    key: string;
    value: string;
}

function createBaseCloneRequest(): CloneRequest {
    return { type: "", auth: undefined, id: "", newId: "", data: {}, eventMetadata: undefined };
}

export const CloneRequest: MessageFns<CloneRequest> = {
    encode(message: CloneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.auth !== undefined) {
            AuthData.encode(message.auth, writer.uint32(18).fork()).join();
        }
        if (message.id !== "") {
            writer.uint32(26).string(message.id);
        }
        if (message.newId !== "") {
            writer.uint32(34).string(message.newId);
        }
        Object.entries(message.data).forEach(([key, value]) => {
            CloneRequest_DataEntry.encode(
                { key: key as any, value },
                writer.uint32(42).fork()
            ).join();
        });
        if (message.eventMetadata !== undefined) {
            EventMetadata.encode(message.eventMetadata, writer.uint32(50).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CloneRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloneRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.auth = AuthData.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.newId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    const entry5 = CloneRequest_DataEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.data[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.eventMetadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): CloneRequest {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            auth: isSet(object.auth) ? AuthData.fromJSON(object.auth) : undefined,
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            newId: isSet(object.newId) ? globalThis.String(object.newId) : "",
            data: isObject(object.data)
                ? Object.entries(object.data).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
            eventMetadata: isSet(object.eventMetadata)
                ? EventMetadata.fromJSON(object.eventMetadata)
                : undefined,
        };
    },

    toJSON(message: CloneRequest): unknown {
        const obj: any = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.auth !== undefined) {
            obj.auth = AuthData.toJSON(message.auth);
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.newId !== "") {
            obj.newId = message.newId;
        }
        if (message.data) {
            const entries = Object.entries(message.data);
            if (entries.length > 0) {
                obj.data = {};
                entries.forEach(([k, v]) => {
                    obj.data[k] = v;
                });
            }
        }
        if (message.eventMetadata !== undefined) {
            obj.eventMetadata = EventMetadata.toJSON(message.eventMetadata);
        }
        return obj;
    },

    create(base?: DeepPartial<CloneRequest>): CloneRequest {
        return CloneRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<CloneRequest>): CloneRequest {
        const message = createBaseCloneRequest();
        message.type = object.type ?? "";
        message.auth =
            object.auth !== undefined && object.auth !== null
                ? AuthData.fromPartial(object.auth)
                : undefined;
        message.id = object.id ?? "";
        message.newId = object.newId ?? "";
        message.data = Object.entries(object.data ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        message.eventMetadata =
            object.eventMetadata !== undefined && object.eventMetadata !== null
                ? EventMetadata.fromPartial(object.eventMetadata)
                : undefined;
        return message;
    },
};

function createBaseCloneRequest_DataEntry(): CloneRequest_DataEntry {
    return { key: "", value: "" };
}

export const CloneRequest_DataEntry: MessageFns<CloneRequest_DataEntry> = {
    encode(
        message: CloneRequest_DataEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CloneRequest_DataEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloneRequest_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): CloneRequest_DataEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: CloneRequest_DataEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<CloneRequest_DataEntry>): CloneRequest_DataEntry {
        return CloneRequest_DataEntry.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<CloneRequest_DataEntry>): CloneRequest_DataEntry {
        const message = createBaseCloneRequest_DataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseCloneResponse(): CloneResponse {
    return { newData: {}, validationErrors: [], fieldValidationErrors: {} };
}

export const CloneResponse: MessageFns<CloneResponse> = {
    encode(message: CloneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        Object.entries(message.newData).forEach(([key, value]) => {
            CloneResponse_NewDataEntry.encode(
                { key: key as any, value },
                writer.uint32(10).fork()
            ).join();
        });
        for (const v of message.validationErrors) {
            writer.uint32(18).string(v!);
        }
        Object.entries(message.fieldValidationErrors).forEach(([key, value]) => {
            CloneResponse_FieldValidationErrorsEntry.encode(
                { key: key as any, value },
                writer.uint32(26).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CloneResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloneResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    const entry1 = CloneResponse_NewDataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.newData[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.validationErrors.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    const entry3 = CloneResponse_FieldValidationErrorsEntry.decode(
                        reader,
                        reader.uint32()
                    );
                    if (entry3.value !== undefined) {
                        message.fieldValidationErrors[entry3.key] = entry3.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): CloneResponse {
        return {
            newData: isObject(object.newData)
                ? Object.entries(object.newData).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
            validationErrors: globalThis.Array.isArray(object?.validationErrors)
                ? object.validationErrors.map((e: any) => globalThis.String(e))
                : [],
            fieldValidationErrors: isObject(object.fieldValidationErrors)
                ? Object.entries(object.fieldValidationErrors).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
        };
    },

    toJSON(message: CloneResponse): unknown {
        const obj: any = {};
        if (message.newData) {
            const entries = Object.entries(message.newData);
            if (entries.length > 0) {
                obj.newData = {};
                entries.forEach(([k, v]) => {
                    obj.newData[k] = v;
                });
            }
        }
        if (message.validationErrors?.length) {
            obj.validationErrors = message.validationErrors;
        }
        if (message.fieldValidationErrors) {
            const entries = Object.entries(message.fieldValidationErrors);
            if (entries.length > 0) {
                obj.fieldValidationErrors = {};
                entries.forEach(([k, v]) => {
                    obj.fieldValidationErrors[k] = v;
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<CloneResponse>): CloneResponse {
        return CloneResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<CloneResponse>): CloneResponse {
        const message = createBaseCloneResponse();
        message.newData = Object.entries(object.newData ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        message.validationErrors = object.validationErrors?.map(e => e) || [];
        message.fieldValidationErrors = Object.entries(object.fieldValidationErrors ?? {}).reduce<{
            [key: string]: string;
        }>((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};

function createBaseCloneResponse_NewDataEntry(): CloneResponse_NewDataEntry {
    return { key: "", value: "" };
}

export const CloneResponse_NewDataEntry: MessageFns<CloneResponse_NewDataEntry> = {
    encode(
        message: CloneResponse_NewDataEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): CloneResponse_NewDataEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCloneResponse_NewDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): CloneResponse_NewDataEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: CloneResponse_NewDataEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<CloneResponse_NewDataEntry>): CloneResponse_NewDataEntry {
        return CloneResponse_NewDataEntry.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<CloneResponse_NewDataEntry>): CloneResponse_NewDataEntry {
        const message = createBaseCloneResponse_NewDataEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseCloneResponse_FieldValidationErrorsEntry(): CloneResponse_FieldValidationErrorsEntry {
    return { key: "", value: "" };
}

export const CloneResponse_FieldValidationErrorsEntry: MessageFns<CloneResponse_FieldValidationErrorsEntry> =
    {
        encode(
            message: CloneResponse_FieldValidationErrorsEntry,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.key !== "") {
                writer.uint32(10).string(message.key);
            }
            if (message.value !== "") {
                writer.uint32(18).string(message.value);
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): CloneResponse_FieldValidationErrorsEntry {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseCloneResponse_FieldValidationErrorsEntry();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 10) {
                            break;
                        }

                        message.key = reader.string();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.value = reader.string();
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): CloneResponse_FieldValidationErrorsEntry {
            return {
                key: isSet(object.key) ? globalThis.String(object.key) : "",
                value: isSet(object.value) ? globalThis.String(object.value) : "",
            };
        },

        toJSON(message: CloneResponse_FieldValidationErrorsEntry): unknown {
            const obj: any = {};
            if (message.key !== "") {
                obj.key = message.key;
            }
            if (message.value !== "") {
                obj.value = message.value;
            }
            return obj;
        },

        create(
            base?: DeepPartial<CloneResponse_FieldValidationErrorsEntry>
        ): CloneResponse_FieldValidationErrorsEntry {
            return CloneResponse_FieldValidationErrorsEntry.fromPartial(base ?? {});
        },
        fromPartial(
            object: DeepPartial<CloneResponse_FieldValidationErrorsEntry>
        ): CloneResponse_FieldValidationErrorsEntry {
            const message = createBaseCloneResponse_FieldValidationErrorsEntry();
            message.key = object.key ?? "";
            message.value = object.value ?? "";
            return message;
        },
    };

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isObject(value: any): boolean {
    return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
