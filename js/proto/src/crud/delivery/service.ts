// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: crud/delivery/service.proto
import {
    type CallOptions,
    ChannelCredentials,
    Client,
    type ClientOptions,
    type ClientUnaryCall,
    Metadata,
    type ServiceError,
    type UntypedServiceImplementation,
    type handleUnaryCall,
    makeGenericClientConstructor,
} from "@grpc/grpc-js";
import { CloneRequest, CloneResponse } from "./clone";
import { CreateRequest, CreateResponse } from "./create";
import { DeleteRequest, DeleteResponse } from "./delete";
import {
    GetDataListRequest,
    GetDataListResponse,
    GetDataRequest,
    GetDataResponse,
} from "./get_data";
import {
    UpdateByFilterRequest,
    UpdateByFilterResponse,
    UpdateRequest,
    UpdateResponse,
} from "./update";

export type ServiceService = typeof ServiceService;
export const ServiceService = {
    getData: {
        path: "/freym.crud.delivery.Service/GetData",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetDataRequest) =>
            Buffer.from(GetDataRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetDataRequest.decode(value),
        responseSerialize: (value: GetDataResponse) =>
            Buffer.from(GetDataResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => GetDataResponse.decode(value),
    },
    getDataList: {
        path: "/freym.crud.delivery.Service/GetDataList",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetDataListRequest) =>
            Buffer.from(GetDataListRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetDataListRequest.decode(value),
        responseSerialize: (value: GetDataListResponse) =>
            Buffer.from(GetDataListResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => GetDataListResponse.decode(value),
    },
    create: {
        path: "/freym.crud.delivery.Service/Create",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: CreateRequest) =>
            Buffer.from(CreateRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => CreateRequest.decode(value),
        responseSerialize: (value: CreateResponse) =>
            Buffer.from(CreateResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => CreateResponse.decode(value),
    },
    update: {
        path: "/freym.crud.delivery.Service/Update",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: UpdateRequest) =>
            Buffer.from(UpdateRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => UpdateRequest.decode(value),
        responseSerialize: (value: UpdateResponse) =>
            Buffer.from(UpdateResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => UpdateResponse.decode(value),
    },
    updateByFilter: {
        path: "/freym.crud.delivery.Service/UpdateByFilter",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: UpdateByFilterRequest) =>
            Buffer.from(UpdateByFilterRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => UpdateByFilterRequest.decode(value),
        responseSerialize: (value: UpdateByFilterResponse) =>
            Buffer.from(UpdateByFilterResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => UpdateByFilterResponse.decode(value),
    },
    delete: {
        path: "/freym.crud.delivery.Service/Delete",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: DeleteRequest) =>
            Buffer.from(DeleteRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => DeleteRequest.decode(value),
        responseSerialize: (value: DeleteResponse) =>
            Buffer.from(DeleteResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => DeleteResponse.decode(value),
    },
    clone: {
        path: "/freym.crud.delivery.Service/Clone",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: CloneRequest) => Buffer.from(CloneRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => CloneRequest.decode(value),
        responseSerialize: (value: CloneResponse) =>
            Buffer.from(CloneResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => CloneResponse.decode(value),
    },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
    getData: handleUnaryCall<GetDataRequest, GetDataResponse>;
    getDataList: handleUnaryCall<GetDataListRequest, GetDataListResponse>;
    create: handleUnaryCall<CreateRequest, CreateResponse>;
    update: handleUnaryCall<UpdateRequest, UpdateResponse>;
    updateByFilter: handleUnaryCall<UpdateByFilterRequest, UpdateByFilterResponse>;
    delete: handleUnaryCall<DeleteRequest, DeleteResponse>;
    clone: handleUnaryCall<CloneRequest, CloneResponse>;
}

export interface ServiceClient extends Client {
    getData(
        request: GetDataRequest,
        callback: (error: ServiceError | null, response: GetDataResponse) => void
    ): ClientUnaryCall;
    getData(
        request: GetDataRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetDataResponse) => void
    ): ClientUnaryCall;
    getData(
        request: GetDataRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetDataResponse) => void
    ): ClientUnaryCall;
    getDataList(
        request: GetDataListRequest,
        callback: (error: ServiceError | null, response: GetDataListResponse) => void
    ): ClientUnaryCall;
    getDataList(
        request: GetDataListRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetDataListResponse) => void
    ): ClientUnaryCall;
    getDataList(
        request: GetDataListRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetDataListResponse) => void
    ): ClientUnaryCall;
    create(
        request: CreateRequest,
        callback: (error: ServiceError | null, response: CreateResponse) => void
    ): ClientUnaryCall;
    create(
        request: CreateRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: CreateResponse) => void
    ): ClientUnaryCall;
    create(
        request: CreateRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: CreateResponse) => void
    ): ClientUnaryCall;
    update(
        request: UpdateRequest,
        callback: (error: ServiceError | null, response: UpdateResponse) => void
    ): ClientUnaryCall;
    update(
        request: UpdateRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: UpdateResponse) => void
    ): ClientUnaryCall;
    update(
        request: UpdateRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: UpdateResponse) => void
    ): ClientUnaryCall;
    updateByFilter(
        request: UpdateByFilterRequest,
        callback: (error: ServiceError | null, response: UpdateByFilterResponse) => void
    ): ClientUnaryCall;
    updateByFilter(
        request: UpdateByFilterRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: UpdateByFilterResponse) => void
    ): ClientUnaryCall;
    updateByFilter(
        request: UpdateByFilterRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: UpdateByFilterResponse) => void
    ): ClientUnaryCall;
    delete(
        request: DeleteRequest,
        callback: (error: ServiceError | null, response: DeleteResponse) => void
    ): ClientUnaryCall;
    delete(
        request: DeleteRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: DeleteResponse) => void
    ): ClientUnaryCall;
    delete(
        request: DeleteRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: DeleteResponse) => void
    ): ClientUnaryCall;
    clone(
        request: CloneRequest,
        callback: (error: ServiceError | null, response: CloneResponse) => void
    ): ClientUnaryCall;
    clone(
        request: CloneRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: CloneResponse) => void
    ): ClientUnaryCall;
    clone(
        request: CloneRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: CloneResponse) => void
    ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(
    ServiceService,
    "freym.crud.delivery.Service"
) as unknown as {
    new (
        address: string,
        credentials: ChannelCredentials,
        options?: Partial<ClientOptions>
    ): ServiceClient;
    service: typeof ServiceService;
    serviceName: string;
};
