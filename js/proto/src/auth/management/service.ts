// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: auth/management/service.proto
import {
    type CallOptions,
    type ChannelCredentials,
    Client,
    type ClientOptions,
    type ClientUnaryCall,
    type Metadata,
    type ServiceError,
    type UntypedServiceImplementation,
    type handleUnaryCall,
    makeGenericClientConstructor,
} from "@grpc/grpc-js";
import {
    ActivateSchemaRequest,
    ActivateSchemaResponse,
    ConfirmSchemaRequest,
    ConfirmSchemaResponse,
    DeploySchemaRequest,
    DeploySchemaResponse,
    GetSchemaDeploymentRequest,
    GetSchemaDeploymentResponse,
    RollbackSchemaByDeploymentRequest,
    RollbackSchemaRequest,
    RollbackSchemaResponse,
} from "./deployment";
import { DeleteRoleRequest, DeleteRoleResponse } from "./role_delete";
import { UpsertRoleRequest, UpsertRoleResponse } from "./role_upsert";
import { GetRolesRequest, GetRolesResponse } from "./roles_get";
import { CreateUserRequest, CreateUserResponse } from "./user_create";
import { DeleteUserRequest, DeleteUserResponse } from "./user_delete";
import { UpdateUserRequest, UpdateUserResponse } from "./user_update";
import { GetUsersRequest, GetUsersResponse } from "./users_get";

export type ServiceService = typeof ServiceService;
export const ServiceService = {
    deploySchema: {
        path: "/freym.auth.management.Service/DeploySchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: DeploySchemaRequest): Buffer =>
            Buffer.from(DeploySchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): DeploySchemaRequest =>
            DeploySchemaRequest.decode(value),
        responseSerialize: (value: DeploySchemaResponse): Buffer =>
            Buffer.from(DeploySchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): DeploySchemaResponse =>
            DeploySchemaResponse.decode(value),
    },
    activateSchema: {
        path: "/freym.auth.management.Service/ActivateSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: ActivateSchemaRequest): Buffer =>
            Buffer.from(ActivateSchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): ActivateSchemaRequest =>
            ActivateSchemaRequest.decode(value),
        responseSerialize: (value: ActivateSchemaResponse): Buffer =>
            Buffer.from(ActivateSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): ActivateSchemaResponse =>
            ActivateSchemaResponse.decode(value),
    },
    confirmSchema: {
        path: "/freym.auth.management.Service/ConfirmSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: ConfirmSchemaRequest): Buffer =>
            Buffer.from(ConfirmSchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): ConfirmSchemaRequest =>
            ConfirmSchemaRequest.decode(value),
        responseSerialize: (value: ConfirmSchemaResponse): Buffer =>
            Buffer.from(ConfirmSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): ConfirmSchemaResponse =>
            ConfirmSchemaResponse.decode(value),
    },
    rollbackSchema: {
        path: "/freym.auth.management.Service/RollbackSchema",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: RollbackSchemaRequest): Buffer =>
            Buffer.from(RollbackSchemaRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): RollbackSchemaRequest =>
            RollbackSchemaRequest.decode(value),
        responseSerialize: (value: RollbackSchemaResponse): Buffer =>
            Buffer.from(RollbackSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): RollbackSchemaResponse =>
            RollbackSchemaResponse.decode(value),
    },
    rollbackSchemaByDeployment: {
        path: "/freym.auth.management.Service/RollbackSchemaByDeployment",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: RollbackSchemaByDeploymentRequest): Buffer =>
            Buffer.from(RollbackSchemaByDeploymentRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): RollbackSchemaByDeploymentRequest =>
            RollbackSchemaByDeploymentRequest.decode(value),
        responseSerialize: (value: RollbackSchemaResponse): Buffer =>
            Buffer.from(RollbackSchemaResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): RollbackSchemaResponse =>
            RollbackSchemaResponse.decode(value),
    },
    getSchemaDeployment: {
        path: "/freym.auth.management.Service/GetSchemaDeployment",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetSchemaDeploymentRequest): Buffer =>
            Buffer.from(GetSchemaDeploymentRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): GetSchemaDeploymentRequest =>
            GetSchemaDeploymentRequest.decode(value),
        responseSerialize: (value: GetSchemaDeploymentResponse): Buffer =>
            Buffer.from(GetSchemaDeploymentResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): GetSchemaDeploymentResponse =>
            GetSchemaDeploymentResponse.decode(value),
    },
    upsertRole: {
        path: "/freym.auth.management.Service/UpsertRole",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: UpsertRoleRequest): Buffer =>
            Buffer.from(UpsertRoleRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): UpsertRoleRequest => UpsertRoleRequest.decode(value),
        responseSerialize: (value: UpsertRoleResponse): Buffer =>
            Buffer.from(UpsertRoleResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): UpsertRoleResponse =>
            UpsertRoleResponse.decode(value),
    },
    deleteRole: {
        path: "/freym.auth.management.Service/DeleteRole",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: DeleteRoleRequest): Buffer =>
            Buffer.from(DeleteRoleRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): DeleteRoleRequest => DeleteRoleRequest.decode(value),
        responseSerialize: (value: DeleteRoleResponse): Buffer =>
            Buffer.from(DeleteRoleResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): DeleteRoleResponse =>
            DeleteRoleResponse.decode(value),
    },
    getRoles: {
        path: "/freym.auth.management.Service/GetRoles",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetRolesRequest): Buffer =>
            Buffer.from(GetRolesRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): GetRolesRequest => GetRolesRequest.decode(value),
        responseSerialize: (value: GetRolesResponse): Buffer =>
            Buffer.from(GetRolesResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): GetRolesResponse => GetRolesResponse.decode(value),
    },
    createUser: {
        path: "/freym.auth.management.Service/CreateUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: CreateUserRequest): Buffer =>
            Buffer.from(CreateUserRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): CreateUserRequest => CreateUserRequest.decode(value),
        responseSerialize: (value: CreateUserResponse): Buffer =>
            Buffer.from(CreateUserResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): CreateUserResponse =>
            CreateUserResponse.decode(value),
    },
    updateUser: {
        path: "/freym.auth.management.Service/UpdateUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: UpdateUserRequest): Buffer =>
            Buffer.from(UpdateUserRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): UpdateUserRequest => UpdateUserRequest.decode(value),
        responseSerialize: (value: UpdateUserResponse): Buffer =>
            Buffer.from(UpdateUserResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): UpdateUserResponse =>
            UpdateUserResponse.decode(value),
    },
    deleteUser: {
        path: "/freym.auth.management.Service/DeleteUser",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: DeleteUserRequest): Buffer =>
            Buffer.from(DeleteUserRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): DeleteUserRequest => DeleteUserRequest.decode(value),
        responseSerialize: (value: DeleteUserResponse): Buffer =>
            Buffer.from(DeleteUserResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): DeleteUserResponse =>
            DeleteUserResponse.decode(value),
    },
    getUsers: {
        path: "/freym.auth.management.Service/GetUsers",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetUsersRequest): Buffer =>
            Buffer.from(GetUsersRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer): GetUsersRequest => GetUsersRequest.decode(value),
        responseSerialize: (value: GetUsersResponse): Buffer =>
            Buffer.from(GetUsersResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer): GetUsersResponse => GetUsersResponse.decode(value),
    },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
    deploySchema: handleUnaryCall<DeploySchemaRequest, DeploySchemaResponse>;
    activateSchema: handleUnaryCall<ActivateSchemaRequest, ActivateSchemaResponse>;
    confirmSchema: handleUnaryCall<ConfirmSchemaRequest, ConfirmSchemaResponse>;
    rollbackSchema: handleUnaryCall<RollbackSchemaRequest, RollbackSchemaResponse>;
    rollbackSchemaByDeployment: handleUnaryCall<
        RollbackSchemaByDeploymentRequest,
        RollbackSchemaResponse
    >;
    getSchemaDeployment: handleUnaryCall<GetSchemaDeploymentRequest, GetSchemaDeploymentResponse>;
    upsertRole: handleUnaryCall<UpsertRoleRequest, UpsertRoleResponse>;
    deleteRole: handleUnaryCall<DeleteRoleRequest, DeleteRoleResponse>;
    getRoles: handleUnaryCall<GetRolesRequest, GetRolesResponse>;
    createUser: handleUnaryCall<CreateUserRequest, CreateUserResponse>;
    updateUser: handleUnaryCall<UpdateUserRequest, UpdateUserResponse>;
    deleteUser: handleUnaryCall<DeleteUserRequest, DeleteUserResponse>;
    getUsers: handleUnaryCall<GetUsersRequest, GetUsersResponse>;
}

export interface ServiceClient extends Client {
    deploySchema(
        request: DeploySchemaRequest,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    deploySchema(
        request: DeploySchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    deploySchema(
        request: DeploySchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: DeploySchemaResponse) => void
    ): ClientUnaryCall;
    activateSchema(
        request: ActivateSchemaRequest,
        callback: (error: ServiceError | null, response: ActivateSchemaResponse) => void
    ): ClientUnaryCall;
    activateSchema(
        request: ActivateSchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: ActivateSchemaResponse) => void
    ): ClientUnaryCall;
    activateSchema(
        request: ActivateSchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: ActivateSchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    confirmSchema(
        request: ConfirmSchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: ConfirmSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchema(
        request: RollbackSchemaRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchemaByDeployment(
        request: RollbackSchemaByDeploymentRequest,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchemaByDeployment(
        request: RollbackSchemaByDeploymentRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    rollbackSchemaByDeployment(
        request: RollbackSchemaByDeploymentRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: RollbackSchemaResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
    getSchemaDeployment(
        request: GetSchemaDeploymentRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetSchemaDeploymentResponse) => void
    ): ClientUnaryCall;
    upsertRole(
        request: UpsertRoleRequest,
        callback: (error: ServiceError | null, response: UpsertRoleResponse) => void
    ): ClientUnaryCall;
    upsertRole(
        request: UpsertRoleRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: UpsertRoleResponse) => void
    ): ClientUnaryCall;
    upsertRole(
        request: UpsertRoleRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: UpsertRoleResponse) => void
    ): ClientUnaryCall;
    deleteRole(
        request: DeleteRoleRequest,
        callback: (error: ServiceError | null, response: DeleteRoleResponse) => void
    ): ClientUnaryCall;
    deleteRole(
        request: DeleteRoleRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: DeleteRoleResponse) => void
    ): ClientUnaryCall;
    deleteRole(
        request: DeleteRoleRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: DeleteRoleResponse) => void
    ): ClientUnaryCall;
    getRoles(
        request: GetRolesRequest,
        callback: (error: ServiceError | null, response: GetRolesResponse) => void
    ): ClientUnaryCall;
    getRoles(
        request: GetRolesRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetRolesResponse) => void
    ): ClientUnaryCall;
    getRoles(
        request: GetRolesRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetRolesResponse) => void
    ): ClientUnaryCall;
    createUser(
        request: CreateUserRequest,
        callback: (error: ServiceError | null, response: CreateUserResponse) => void
    ): ClientUnaryCall;
    createUser(
        request: CreateUserRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: CreateUserResponse) => void
    ): ClientUnaryCall;
    createUser(
        request: CreateUserRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: CreateUserResponse) => void
    ): ClientUnaryCall;
    updateUser(
        request: UpdateUserRequest,
        callback: (error: ServiceError | null, response: UpdateUserResponse) => void
    ): ClientUnaryCall;
    updateUser(
        request: UpdateUserRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: UpdateUserResponse) => void
    ): ClientUnaryCall;
    updateUser(
        request: UpdateUserRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: UpdateUserResponse) => void
    ): ClientUnaryCall;
    deleteUser(
        request: DeleteUserRequest,
        callback: (error: ServiceError | null, response: DeleteUserResponse) => void
    ): ClientUnaryCall;
    deleteUser(
        request: DeleteUserRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: DeleteUserResponse) => void
    ): ClientUnaryCall;
    deleteUser(
        request: DeleteUserRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: DeleteUserResponse) => void
    ): ClientUnaryCall;
    getUsers(
        request: GetUsersRequest,
        callback: (error: ServiceError | null, response: GetUsersResponse) => void
    ): ClientUnaryCall;
    getUsers(
        request: GetUsersRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: GetUsersResponse) => void
    ): ClientUnaryCall;
    getUsers(
        request: GetUsersRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: GetUsersResponse) => void
    ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(
    ServiceService,
    "freym.auth.management.Service"
) as unknown as {
    new (
        address: string,
        credentials: ChannelCredentials,
        options?: Partial<ClientOptions>
    ): ServiceClient;
    service: typeof ServiceService;
    serviceName: string;
};
