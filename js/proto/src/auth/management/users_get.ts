// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth/management/users_get.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface GetUsersRequest {
    tenantId: string;
    limit: string;
    page: string;
}

export interface GetUsersResponse {
    users: User[];
    limit: string;
    page: string;
    total: string;
}

export interface User {
    id: string;
    login: string;
    email: string;
    displayName: string;
    assignedRoleIds: string[];
    active: boolean;
    failedAttempts: string;
    lastAttempt: string;
    blockedUntil: string;
}

function createBaseGetUsersRequest(): GetUsersRequest {
    return { tenantId: "", limit: "0", page: "0" };
}

export const GetUsersRequest: MessageFns<GetUsersRequest> = {
    encode(message: GetUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.limit !== "0") {
            writer.uint32(16).int64(message.limit);
        }
        if (message.page !== "0") {
            writer.uint32(24).int64(message.page);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetUsersRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }

                    message.limit = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }

                    message.page = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetUsersRequest {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            limit: isSet(object.limit) ? globalThis.String(object.limit) : "0",
            page: isSet(object.page) ? globalThis.String(object.page) : "0",
        };
    },

    toJSON(message: GetUsersRequest): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.limit !== "0") {
            obj.limit = message.limit;
        }
        if (message.page !== "0") {
            obj.page = message.page;
        }
        return obj;
    },

    create(base?: DeepPartial<GetUsersRequest>): GetUsersRequest {
        return GetUsersRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetUsersRequest>): GetUsersRequest {
        const message = createBaseGetUsersRequest();
        message.tenantId = object.tenantId ?? "";
        message.limit = object.limit ?? "0";
        message.page = object.page ?? "0";
        return message;
    },
};

function createBaseGetUsersResponse(): GetUsersResponse {
    return { users: [], limit: "0", page: "0", total: "0" };
}

export const GetUsersResponse: MessageFns<GetUsersResponse> = {
    encode(message: GetUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        for (const v of message.users) {
            User.encode(v!, writer.uint32(10).fork()).join();
        }
        if (message.limit !== "0") {
            writer.uint32(16).int64(message.limit);
        }
        if (message.page !== "0") {
            writer.uint32(24).int64(message.page);
        }
        if (message.total !== "0") {
            writer.uint32(32).int64(message.total);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetUsersResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetUsersResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.users.push(User.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }

                    message.limit = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }

                    message.page = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }

                    message.total = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetUsersResponse {
        return {
            users: globalThis.Array.isArray(object?.users)
                ? object.users.map((e: any) => User.fromJSON(e))
                : [],
            limit: isSet(object.limit) ? globalThis.String(object.limit) : "0",
            page: isSet(object.page) ? globalThis.String(object.page) : "0",
            total: isSet(object.total) ? globalThis.String(object.total) : "0",
        };
    },

    toJSON(message: GetUsersResponse): unknown {
        const obj: any = {};
        if (message.users?.length) {
            obj.users = message.users.map(e => User.toJSON(e));
        }
        if (message.limit !== "0") {
            obj.limit = message.limit;
        }
        if (message.page !== "0") {
            obj.page = message.page;
        }
        if (message.total !== "0") {
            obj.total = message.total;
        }
        return obj;
    },

    create(base?: DeepPartial<GetUsersResponse>): GetUsersResponse {
        return GetUsersResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetUsersResponse>): GetUsersResponse {
        const message = createBaseGetUsersResponse();
        message.users = object.users?.map(e => User.fromPartial(e)) || [];
        message.limit = object.limit ?? "0";
        message.page = object.page ?? "0";
        message.total = object.total ?? "0";
        return message;
    },
};

function createBaseUser(): User {
    return {
        id: "",
        login: "",
        email: "",
        displayName: "",
        assignedRoleIds: [],
        active: false,
        failedAttempts: "0",
        lastAttempt: "0",
        blockedUntil: "0",
    };
}

export const User: MessageFns<User> = {
    encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.login !== "") {
            writer.uint32(18).string(message.login);
        }
        if (message.email !== "") {
            writer.uint32(26).string(message.email);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        for (const v of message.assignedRoleIds) {
            writer.uint32(42).string(v!);
        }
        if (message.active !== false) {
            writer.uint32(48).bool(message.active);
        }
        if (message.failedAttempts !== "0") {
            writer.uint32(56).int64(message.failedAttempts);
        }
        if (message.lastAttempt !== "0") {
            writer.uint32(64).int64(message.lastAttempt);
        }
        if (message.blockedUntil !== "0") {
            writer.uint32(72).int64(message.blockedUntil);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): User {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.login = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.email = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.displayName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.assignedRoleIds.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }

                    message.active = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }

                    message.failedAttempts = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }

                    message.lastAttempt = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }

                    message.blockedUntil = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): User {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            login: isSet(object.login) ? globalThis.String(object.login) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            assignedRoleIds: globalThis.Array.isArray(object?.assignedRoleIds)
                ? object.assignedRoleIds.map((e: any) => globalThis.String(e))
                : [],
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
            failedAttempts: isSet(object.failedAttempts)
                ? globalThis.String(object.failedAttempts)
                : "0",
            lastAttempt: isSet(object.lastAttempt) ? globalThis.String(object.lastAttempt) : "0",
            blockedUntil: isSet(object.blockedUntil) ? globalThis.String(object.blockedUntil) : "0",
        };
    },

    toJSON(message: User): unknown {
        const obj: any = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.login !== "") {
            obj.login = message.login;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.assignedRoleIds?.length) {
            obj.assignedRoleIds = message.assignedRoleIds;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        if (message.failedAttempts !== "0") {
            obj.failedAttempts = message.failedAttempts;
        }
        if (message.lastAttempt !== "0") {
            obj.lastAttempt = message.lastAttempt;
        }
        if (message.blockedUntil !== "0") {
            obj.blockedUntil = message.blockedUntil;
        }
        return obj;
    },

    create(base?: DeepPartial<User>): User {
        return User.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<User>): User {
        const message = createBaseUser();
        message.id = object.id ?? "";
        message.login = object.login ?? "";
        message.email = object.email ?? "";
        message.displayName = object.displayName ?? "";
        message.assignedRoleIds = object.assignedRoleIds?.map(e => e) || [];
        message.active = object.active ?? false;
        message.failedAttempts = object.failedAttempts ?? "0";
        message.lastAttempt = object.lastAttempt ?? "0";
        message.blockedUntil = object.blockedUntil ?? "0";
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
