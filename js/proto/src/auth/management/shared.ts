// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: auth/management/shared.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface RoleScope {
    clientId: string;
    scopeName: string;
}

export interface Metadata {
    causationId: string;
    correlationId: string;
    userId: string;
}

function createBaseRoleScope(): RoleScope {
    return { clientId: "", scopeName: "" };
}

export const RoleScope: MessageFns<RoleScope> = {
    encode(message: RoleScope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.scopeName !== "") {
            writer.uint32(18).string(message.scopeName);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RoleScope {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleScope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.clientId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.scopeName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RoleScope {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "",
            scopeName: isSet(object.scopeName) ? globalThis.String(object.scopeName) : "",
        };
    },

    toJSON(message: RoleScope): unknown {
        const obj: any = {};
        if (message.clientId !== "") {
            obj.clientId = message.clientId;
        }
        if (message.scopeName !== "") {
            obj.scopeName = message.scopeName;
        }
        return obj;
    },

    create(base?: DeepPartial<RoleScope>): RoleScope {
        return RoleScope.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RoleScope>): RoleScope {
        const message = createBaseRoleScope();
        message.clientId = object.clientId ?? "";
        message.scopeName = object.scopeName ?? "";
        return message;
    },
};

function createBaseMetadata(): Metadata {
    return { causationId: "", correlationId: "", userId: "" };
}

export const Metadata: MessageFns<Metadata> = {
    encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.causationId !== "") {
            writer.uint32(10).string(message.causationId);
        }
        if (message.correlationId !== "") {
            writer.uint32(18).string(message.correlationId);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.causationId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.correlationId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.userId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): Metadata {
        return {
            causationId: isSet(object.causationId) ? globalThis.String(object.causationId) : "",
            correlationId: isSet(object.correlationId)
                ? globalThis.String(object.correlationId)
                : "",
            userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
        };
    },

    toJSON(message: Metadata): unknown {
        const obj: any = {};
        if (message.causationId !== "") {
            obj.causationId = message.causationId;
        }
        if (message.correlationId !== "") {
            obj.correlationId = message.correlationId;
        }
        if (message.userId !== "") {
            obj.userId = message.userId;
        }
        return obj;
    },

    create(base?: DeepPartial<Metadata>): Metadata {
        return Metadata.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<Metadata>): Metadata {
        const message = createBaseMetadata();
        message.causationId = object.causationId ?? "";
        message.correlationId = object.correlationId ?? "";
        message.userId = object.userId ?? "";
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
