// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: auth/management/user_update.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EventMetadata } from "./shared";

export interface UpdateUserRequest {
    tenantId: string;
    id: string;
    login: string;
    email: string;
    displayName: string;
    password: string;
    assignedRoleIds: string[];
    active: boolean;
    blockedUntil: string;
    eventMetadata: EventMetadata | undefined;
}

export interface UpdateUserResponse {}

function createBaseUpdateUserRequest(): UpdateUserRequest {
    return {
        tenantId: "",
        id: "",
        login: "",
        email: "",
        displayName: "",
        password: "",
        assignedRoleIds: [],
        active: false,
        blockedUntil: "0",
        eventMetadata: undefined,
    };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
    encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.login !== "") {
            writer.uint32(26).string(message.login);
        }
        if (message.email !== "") {
            writer.uint32(34).string(message.email);
        }
        if (message.displayName !== "") {
            writer.uint32(42).string(message.displayName);
        }
        if (message.password !== "") {
            writer.uint32(50).string(message.password);
        }
        for (const v of message.assignedRoleIds) {
            writer.uint32(58).string(v!);
        }
        if (message.active !== false) {
            writer.uint32(64).bool(message.active);
        }
        if (message.blockedUntil !== "0") {
            writer.uint32(72).int64(message.blockedUntil);
        }
        if (message.eventMetadata !== undefined) {
            EventMetadata.encode(message.eventMetadata, writer.uint32(82).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateUserRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.login = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.email = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.displayName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.password = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }

                    message.assignedRoleIds.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }

                    message.active = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }

                    message.blockedUntil = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }

                    message.eventMetadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UpdateUserRequest {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            login: isSet(object.login) ? globalThis.String(object.login) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
            password: isSet(object.password) ? globalThis.String(object.password) : "",
            assignedRoleIds: globalThis.Array.isArray(object?.assignedRoleIds)
                ? object.assignedRoleIds.map((e: any) => globalThis.String(e))
                : [],
            active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
            blockedUntil: isSet(object.blockedUntil) ? globalThis.String(object.blockedUntil) : "0",
            eventMetadata: isSet(object.eventMetadata)
                ? EventMetadata.fromJSON(object.eventMetadata)
                : undefined,
        };
    },

    toJSON(message: UpdateUserRequest): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.login !== "") {
            obj.login = message.login;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.displayName !== "") {
            obj.displayName = message.displayName;
        }
        if (message.password !== "") {
            obj.password = message.password;
        }
        if (message.assignedRoleIds?.length) {
            obj.assignedRoleIds = message.assignedRoleIds;
        }
        if (message.active !== false) {
            obj.active = message.active;
        }
        if (message.blockedUntil !== "0") {
            obj.blockedUntil = message.blockedUntil;
        }
        if (message.eventMetadata !== undefined) {
            obj.eventMetadata = EventMetadata.toJSON(message.eventMetadata);
        }
        return obj;
    },

    create(base?: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
        return UpdateUserRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UpdateUserRequest>): UpdateUserRequest {
        const message = createBaseUpdateUserRequest();
        message.tenantId = object.tenantId ?? "";
        message.id = object.id ?? "";
        message.login = object.login ?? "";
        message.email = object.email ?? "";
        message.displayName = object.displayName ?? "";
        message.password = object.password ?? "";
        message.assignedRoleIds = object.assignedRoleIds?.map(e => e) || [];
        message.active = object.active ?? false;
        message.blockedUntil = object.blockedUntil ?? "0";
        message.eventMetadata =
            object.eventMetadata !== undefined && object.eventMetadata !== null
                ? EventMetadata.fromPartial(object.eventMetadata)
                : undefined;
        return message;
    },
};

function createBaseUpdateUserResponse(): UpdateUserResponse {
    return {};
}

export const UpdateUserResponse: MessageFns<UpdateUserResponse> = {
    encode(_: UpdateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateUserResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): UpdateUserResponse {
        return {};
    },

    toJSON(_: UpdateUserResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
        return UpdateUserResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<UpdateUserResponse>): UpdateUserResponse {
        const message = createBaseUpdateUserResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
