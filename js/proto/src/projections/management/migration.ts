// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: projections/management/migration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const DeploymentTarget = {
    DEPLOYMENT_TARGET_BLUE: "DEPLOYMENT_TARGET_BLUE",
    DEPLOYMENT_TARGET_GREEN: "DEPLOYMENT_TARGET_GREEN",
} as const;

export type DeploymentTarget = (typeof DeploymentTarget)[keyof typeof DeploymentTarget];

export namespace DeploymentTarget {
    export type DEPLOYMENT_TARGET_BLUE = typeof DeploymentTarget.DEPLOYMENT_TARGET_BLUE;
    export type DEPLOYMENT_TARGET_GREEN = typeof DeploymentTarget.DEPLOYMENT_TARGET_GREEN;
}

export function deploymentTargetFromJSON(object: any): DeploymentTarget {
    switch (object) {
        case 0:
        case "DEPLOYMENT_TARGET_BLUE":
            return DeploymentTarget.DEPLOYMENT_TARGET_BLUE;
        case 1:
        case "DEPLOYMENT_TARGET_GREEN":
            return DeploymentTarget.DEPLOYMENT_TARGET_GREEN;
        default:
            throw new globalThis.Error(
                "Unrecognized enum value " + object + " for enum DeploymentTarget"
            );
    }
}

export function deploymentTargetToJSON(object: DeploymentTarget): string {
    switch (object) {
        case DeploymentTarget.DEPLOYMENT_TARGET_BLUE:
            return "DEPLOYMENT_TARGET_BLUE";
        case DeploymentTarget.DEPLOYMENT_TARGET_GREEN:
            return "DEPLOYMENT_TARGET_GREEN";
        default:
            throw new globalThis.Error(
                "Unrecognized enum value " + object + " for enum DeploymentTarget"
            );
    }
}

export function deploymentTargetToNumber(object: DeploymentTarget): number {
    switch (object) {
        case DeploymentTarget.DEPLOYMENT_TARGET_BLUE:
            return 0;
        case DeploymentTarget.DEPLOYMENT_TARGET_GREEN:
            return 1;
        default:
            throw new globalThis.Error(
                "Unrecognized enum value " + object + " for enum DeploymentTarget"
            );
    }
}

export interface DeploySchemaRequest {
    namespace: string;
    projectionTypes: ObjectType[];
    crudTypes: ObjectType[];
    nestedTypes: ObjectType[];
    enumTypes: EnumType[];
    views: View[];
    options: DeploymentOptions | undefined;
}

export interface DeploySchemaResponse {}

export interface ConfirmSchemaRequest {
    deploymentId: string;
}

export interface ConfirmSchemaResponse {}

export interface RollbackSchemaRequest {
    deploymentId: string;
}

export interface RollbackSchemaResponse {}

export interface GetSchemaDeploymentRequest {
    deploymentId: string;
}

export interface GetSchemaDeploymentResponse {
    progress: number;
}

export interface DeploymentOptions {
    dangerouslyRemoveGdprFields: boolean;
    target: DeploymentTarget;
}

export interface ObjectType {
    name: string;
    directives: TypeDirective[];
    fields: TypeField[];
}

export interface TypeDirective {
    name: string;
    arguments: TypeArgument[];
}

export interface TypeField {
    name: string;
    type: string[];
    directives: TypeDirective[];
}

export interface TypeArgument {
    name: string;
    value: string;
}

export interface EnumType {
    name: string;
    values: string[];
}

export interface View {
    name: string;
    sql: string;
    directives: TypeDirective[];
    fields: TypeField[];
}

function createBaseDeploySchemaRequest(): DeploySchemaRequest {
    return {
        namespace: "",
        projectionTypes: [],
        crudTypes: [],
        nestedTypes: [],
        enumTypes: [],
        views: [],
        options: undefined,
    };
}

export const DeploySchemaRequest: MessageFns<DeploySchemaRequest> = {
    encode(message: DeploySchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.namespace !== "") {
            writer.uint32(10).string(message.namespace);
        }
        for (const v of message.projectionTypes) {
            ObjectType.encode(v!, writer.uint32(18).fork()).join();
        }
        for (const v of message.crudTypes) {
            ObjectType.encode(v!, writer.uint32(26).fork()).join();
        }
        for (const v of message.nestedTypes) {
            ObjectType.encode(v!, writer.uint32(34).fork()).join();
        }
        for (const v of message.enumTypes) {
            EnumType.encode(v!, writer.uint32(42).fork()).join();
        }
        for (const v of message.views) {
            View.encode(v!, writer.uint32(50).fork()).join();
        }
        if (message.options !== undefined) {
            DeploymentOptions.encode(message.options, writer.uint32(58).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeploySchemaRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeploySchemaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.namespace = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.projectionTypes.push(ObjectType.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.crudTypes.push(ObjectType.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.nestedTypes.push(ObjectType.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.enumTypes.push(EnumType.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.views.push(View.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }

                    message.options = DeploymentOptions.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): DeploySchemaRequest {
        return {
            namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
            projectionTypes: globalThis.Array.isArray(object?.projectionTypes)
                ? object.projectionTypes.map((e: any) => ObjectType.fromJSON(e))
                : [],
            crudTypes: globalThis.Array.isArray(object?.crudTypes)
                ? object.crudTypes.map((e: any) => ObjectType.fromJSON(e))
                : [],
            nestedTypes: globalThis.Array.isArray(object?.nestedTypes)
                ? object.nestedTypes.map((e: any) => ObjectType.fromJSON(e))
                : [],
            enumTypes: globalThis.Array.isArray(object?.enumTypes)
                ? object.enumTypes.map((e: any) => EnumType.fromJSON(e))
                : [],
            views: globalThis.Array.isArray(object?.views)
                ? object.views.map((e: any) => View.fromJSON(e))
                : [],
            options: isSet(object.options) ? DeploymentOptions.fromJSON(object.options) : undefined,
        };
    },

    toJSON(message: DeploySchemaRequest): unknown {
        const obj: any = {};
        if (message.namespace !== "") {
            obj.namespace = message.namespace;
        }
        if (message.projectionTypes?.length) {
            obj.projectionTypes = message.projectionTypes.map(e => ObjectType.toJSON(e));
        }
        if (message.crudTypes?.length) {
            obj.crudTypes = message.crudTypes.map(e => ObjectType.toJSON(e));
        }
        if (message.nestedTypes?.length) {
            obj.nestedTypes = message.nestedTypes.map(e => ObjectType.toJSON(e));
        }
        if (message.enumTypes?.length) {
            obj.enumTypes = message.enumTypes.map(e => EnumType.toJSON(e));
        }
        if (message.views?.length) {
            obj.views = message.views.map(e => View.toJSON(e));
        }
        if (message.options !== undefined) {
            obj.options = DeploymentOptions.toJSON(message.options);
        }
        return obj;
    },

    create(base?: DeepPartial<DeploySchemaRequest>): DeploySchemaRequest {
        return DeploySchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<DeploySchemaRequest>): DeploySchemaRequest {
        const message = createBaseDeploySchemaRequest();
        message.namespace = object.namespace ?? "";
        message.projectionTypes = object.projectionTypes?.map(e => ObjectType.fromPartial(e)) || [];
        message.crudTypes = object.crudTypes?.map(e => ObjectType.fromPartial(e)) || [];
        message.nestedTypes = object.nestedTypes?.map(e => ObjectType.fromPartial(e)) || [];
        message.enumTypes = object.enumTypes?.map(e => EnumType.fromPartial(e)) || [];
        message.views = object.views?.map(e => View.fromPartial(e)) || [];
        message.options =
            object.options !== undefined && object.options !== null
                ? DeploymentOptions.fromPartial(object.options)
                : undefined;
        return message;
    },
};

function createBaseDeploySchemaResponse(): DeploySchemaResponse {
    return {};
}

export const DeploySchemaResponse: MessageFns<DeploySchemaResponse> = {
    encode(_: DeploySchemaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeploySchemaResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeploySchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): DeploySchemaResponse {
        return {};
    },

    toJSON(_: DeploySchemaResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<DeploySchemaResponse>): DeploySchemaResponse {
        return DeploySchemaResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<DeploySchemaResponse>): DeploySchemaResponse {
        const message = createBaseDeploySchemaResponse();
        return message;
    },
};

function createBaseConfirmSchemaRequest(): ConfirmSchemaRequest {
    return { deploymentId: "0" };
}

export const ConfirmSchemaRequest: MessageFns<ConfirmSchemaRequest> = {
    encode(message: ConfirmSchemaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.deploymentId !== "0") {
            writer.uint32(8).int64(message.deploymentId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ConfirmSchemaRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmSchemaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.deploymentId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ConfirmSchemaRequest {
        return {
            deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "0",
        };
    },

    toJSON(message: ConfirmSchemaRequest): unknown {
        const obj: any = {};
        if (message.deploymentId !== "0") {
            obj.deploymentId = message.deploymentId;
        }
        return obj;
    },

    create(base?: DeepPartial<ConfirmSchemaRequest>): ConfirmSchemaRequest {
        return ConfirmSchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ConfirmSchemaRequest>): ConfirmSchemaRequest {
        const message = createBaseConfirmSchemaRequest();
        message.deploymentId = object.deploymentId ?? "0";
        return message;
    },
};

function createBaseConfirmSchemaResponse(): ConfirmSchemaResponse {
    return {};
}

export const ConfirmSchemaResponse: MessageFns<ConfirmSchemaResponse> = {
    encode(_: ConfirmSchemaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ConfirmSchemaResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfirmSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): ConfirmSchemaResponse {
        return {};
    },

    toJSON(_: ConfirmSchemaResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<ConfirmSchemaResponse>): ConfirmSchemaResponse {
        return ConfirmSchemaResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<ConfirmSchemaResponse>): ConfirmSchemaResponse {
        const message = createBaseConfirmSchemaResponse();
        return message;
    },
};

function createBaseRollbackSchemaRequest(): RollbackSchemaRequest {
    return { deploymentId: "0" };
}

export const RollbackSchemaRequest: MessageFns<RollbackSchemaRequest> = {
    encode(
        message: RollbackSchemaRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.deploymentId !== "0") {
            writer.uint32(8).int64(message.deploymentId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RollbackSchemaRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRollbackSchemaRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.deploymentId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RollbackSchemaRequest {
        return {
            deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "0",
        };
    },

    toJSON(message: RollbackSchemaRequest): unknown {
        const obj: any = {};
        if (message.deploymentId !== "0") {
            obj.deploymentId = message.deploymentId;
        }
        return obj;
    },

    create(base?: DeepPartial<RollbackSchemaRequest>): RollbackSchemaRequest {
        return RollbackSchemaRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RollbackSchemaRequest>): RollbackSchemaRequest {
        const message = createBaseRollbackSchemaRequest();
        message.deploymentId = object.deploymentId ?? "0";
        return message;
    },
};

function createBaseRollbackSchemaResponse(): RollbackSchemaResponse {
    return {};
}

export const RollbackSchemaResponse: MessageFns<RollbackSchemaResponse> = {
    encode(_: RollbackSchemaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RollbackSchemaResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRollbackSchemaResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): RollbackSchemaResponse {
        return {};
    },

    toJSON(_: RollbackSchemaResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<RollbackSchemaResponse>): RollbackSchemaResponse {
        return RollbackSchemaResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<RollbackSchemaResponse>): RollbackSchemaResponse {
        const message = createBaseRollbackSchemaResponse();
        return message;
    },
};

function createBaseGetSchemaDeploymentRequest(): GetSchemaDeploymentRequest {
    return { deploymentId: "0" };
}

export const GetSchemaDeploymentRequest: MessageFns<GetSchemaDeploymentRequest> = {
    encode(
        message: GetSchemaDeploymentRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.deploymentId !== "0") {
            writer.uint32(8).int64(message.deploymentId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetSchemaDeploymentRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchemaDeploymentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.deploymentId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetSchemaDeploymentRequest {
        return {
            deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "0",
        };
    },

    toJSON(message: GetSchemaDeploymentRequest): unknown {
        const obj: any = {};
        if (message.deploymentId !== "0") {
            obj.deploymentId = message.deploymentId;
        }
        return obj;
    },

    create(base?: DeepPartial<GetSchemaDeploymentRequest>): GetSchemaDeploymentRequest {
        return GetSchemaDeploymentRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetSchemaDeploymentRequest>): GetSchemaDeploymentRequest {
        const message = createBaseGetSchemaDeploymentRequest();
        message.deploymentId = object.deploymentId ?? "0";
        return message;
    },
};

function createBaseGetSchemaDeploymentResponse(): GetSchemaDeploymentResponse {
    return { progress: 0 };
}

export const GetSchemaDeploymentResponse: MessageFns<GetSchemaDeploymentResponse> = {
    encode(
        message: GetSchemaDeploymentResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.progress !== 0) {
            writer.uint32(8).uint32(message.progress);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetSchemaDeploymentResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSchemaDeploymentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.progress = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetSchemaDeploymentResponse {
        return { progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0 };
    },

    toJSON(message: GetSchemaDeploymentResponse): unknown {
        const obj: any = {};
        if (message.progress !== 0) {
            obj.progress = Math.round(message.progress);
        }
        return obj;
    },

    create(base?: DeepPartial<GetSchemaDeploymentResponse>): GetSchemaDeploymentResponse {
        return GetSchemaDeploymentResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetSchemaDeploymentResponse>): GetSchemaDeploymentResponse {
        const message = createBaseGetSchemaDeploymentResponse();
        message.progress = object.progress ?? 0;
        return message;
    },
};

function createBaseDeploymentOptions(): DeploymentOptions {
    return { dangerouslyRemoveGdprFields: false, target: DeploymentTarget.DEPLOYMENT_TARGET_BLUE };
}

export const DeploymentOptions: MessageFns<DeploymentOptions> = {
    encode(message: DeploymentOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.dangerouslyRemoveGdprFields !== false) {
            writer.uint32(8).bool(message.dangerouslyRemoveGdprFields);
        }
        if (message.target !== DeploymentTarget.DEPLOYMENT_TARGET_BLUE) {
            writer.uint32(16).int32(deploymentTargetToNumber(message.target));
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeploymentOptions {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDeploymentOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.dangerouslyRemoveGdprFields = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }

                    message.target = deploymentTargetFromJSON(reader.int32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): DeploymentOptions {
        return {
            dangerouslyRemoveGdprFields: isSet(object.dangerouslyRemoveGdprFields)
                ? globalThis.Boolean(object.dangerouslyRemoveGdprFields)
                : false,
            target: isSet(object.target)
                ? deploymentTargetFromJSON(object.target)
                : DeploymentTarget.DEPLOYMENT_TARGET_BLUE,
        };
    },

    toJSON(message: DeploymentOptions): unknown {
        const obj: any = {};
        if (message.dangerouslyRemoveGdprFields !== false) {
            obj.dangerouslyRemoveGdprFields = message.dangerouslyRemoveGdprFields;
        }
        if (message.target !== DeploymentTarget.DEPLOYMENT_TARGET_BLUE) {
            obj.target = deploymentTargetToJSON(message.target);
        }
        return obj;
    },

    create(base?: DeepPartial<DeploymentOptions>): DeploymentOptions {
        return DeploymentOptions.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<DeploymentOptions>): DeploymentOptions {
        const message = createBaseDeploymentOptions();
        message.dangerouslyRemoveGdprFields = object.dangerouslyRemoveGdprFields ?? false;
        message.target = object.target ?? DeploymentTarget.DEPLOYMENT_TARGET_BLUE;
        return message;
    },
};

function createBaseObjectType(): ObjectType {
    return { name: "", directives: [], fields: [] };
}

export const ObjectType: MessageFns<ObjectType> = {
    encode(message: ObjectType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.directives) {
            TypeDirective.encode(v!, writer.uint32(18).fork()).join();
        }
        for (const v of message.fields) {
            TypeField.encode(v!, writer.uint32(26).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ObjectType {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseObjectType();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.directives.push(TypeDirective.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.fields.push(TypeField.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ObjectType {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            directives: globalThis.Array.isArray(object?.directives)
                ? object.directives.map((e: any) => TypeDirective.fromJSON(e))
                : [],
            fields: globalThis.Array.isArray(object?.fields)
                ? object.fields.map((e: any) => TypeField.fromJSON(e))
                : [],
        };
    },

    toJSON(message: ObjectType): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.directives?.length) {
            obj.directives = message.directives.map(e => TypeDirective.toJSON(e));
        }
        if (message.fields?.length) {
            obj.fields = message.fields.map(e => TypeField.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<ObjectType>): ObjectType {
        return ObjectType.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ObjectType>): ObjectType {
        const message = createBaseObjectType();
        message.name = object.name ?? "";
        message.directives = object.directives?.map(e => TypeDirective.fromPartial(e)) || [];
        message.fields = object.fields?.map(e => TypeField.fromPartial(e)) || [];
        return message;
    },
};

function createBaseTypeDirective(): TypeDirective {
    return { name: "", arguments: [] };
}

export const TypeDirective: MessageFns<TypeDirective> = {
    encode(message: TypeDirective, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.arguments) {
            TypeArgument.encode(v!, writer.uint32(18).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): TypeDirective {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypeDirective();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.arguments.push(TypeArgument.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): TypeDirective {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            arguments: globalThis.Array.isArray(object?.arguments)
                ? object.arguments.map((e: any) => TypeArgument.fromJSON(e))
                : [],
        };
    },

    toJSON(message: TypeDirective): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.arguments?.length) {
            obj.arguments = message.arguments.map(e => TypeArgument.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<TypeDirective>): TypeDirective {
        return TypeDirective.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<TypeDirective>): TypeDirective {
        const message = createBaseTypeDirective();
        message.name = object.name ?? "";
        message.arguments = object.arguments?.map(e => TypeArgument.fromPartial(e)) || [];
        return message;
    },
};

function createBaseTypeField(): TypeField {
    return { name: "", type: [], directives: [] };
}

export const TypeField: MessageFns<TypeField> = {
    encode(message: TypeField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.type) {
            writer.uint32(18).string(v!);
        }
        for (const v of message.directives) {
            TypeDirective.encode(v!, writer.uint32(26).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): TypeField {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypeField();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.type.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.directives.push(TypeDirective.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): TypeField {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            type: globalThis.Array.isArray(object?.type)
                ? object.type.map((e: any) => globalThis.String(e))
                : [],
            directives: globalThis.Array.isArray(object?.directives)
                ? object.directives.map((e: any) => TypeDirective.fromJSON(e))
                : [],
        };
    },

    toJSON(message: TypeField): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.type?.length) {
            obj.type = message.type;
        }
        if (message.directives?.length) {
            obj.directives = message.directives.map(e => TypeDirective.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<TypeField>): TypeField {
        return TypeField.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<TypeField>): TypeField {
        const message = createBaseTypeField();
        message.name = object.name ?? "";
        message.type = object.type?.map(e => e) || [];
        message.directives = object.directives?.map(e => TypeDirective.fromPartial(e)) || [];
        return message;
    },
};

function createBaseTypeArgument(): TypeArgument {
    return { name: "", value: "" };
}

export const TypeArgument: MessageFns<TypeArgument> = {
    encode(message: TypeArgument, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): TypeArgument {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypeArgument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): TypeArgument {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: TypeArgument): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<TypeArgument>): TypeArgument {
        return TypeArgument.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<TypeArgument>): TypeArgument {
        const message = createBaseTypeArgument();
        message.name = object.name ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseEnumType(): EnumType {
    return { name: "", values: [] };
}

export const EnumType: MessageFns<EnumType> = {
    encode(message: EnumType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.values) {
            writer.uint32(18).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): EnumType {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnumType();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.values.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): EnumType {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            values: globalThis.Array.isArray(object?.values)
                ? object.values.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: EnumType): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.values?.length) {
            obj.values = message.values;
        }
        return obj;
    },

    create(base?: DeepPartial<EnumType>): EnumType {
        return EnumType.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<EnumType>): EnumType {
        const message = createBaseEnumType();
        message.name = object.name ?? "";
        message.values = object.values?.map(e => e) || [];
        return message;
    },
};

function createBaseView(): View {
    return { name: "", sql: "", directives: [], fields: [] };
}

export const View: MessageFns<View> = {
    encode(message: View, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.sql !== "") {
            writer.uint32(18).string(message.sql);
        }
        for (const v of message.directives) {
            TypeDirective.encode(v!, writer.uint32(26).fork()).join();
        }
        for (const v of message.fields) {
            TypeField.encode(v!, writer.uint32(34).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): View {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseView();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.sql = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.directives.push(TypeDirective.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.fields.push(TypeField.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): View {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            sql: isSet(object.sql) ? globalThis.String(object.sql) : "",
            directives: globalThis.Array.isArray(object?.directives)
                ? object.directives.map((e: any) => TypeDirective.fromJSON(e))
                : [],
            fields: globalThis.Array.isArray(object?.fields)
                ? object.fields.map((e: any) => TypeField.fromJSON(e))
                : [],
        };
    },

    toJSON(message: View): unknown {
        const obj: any = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.sql !== "") {
            obj.sql = message.sql;
        }
        if (message.directives?.length) {
            obj.directives = message.directives.map(e => TypeDirective.toJSON(e));
        }
        if (message.fields?.length) {
            obj.fields = message.fields.map(e => TypeField.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<View>): View {
        return View.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<View>): View {
        const message = createBaseView();
        message.name = object.name ?? "";
        message.sql = object.sql ?? "";
        message.directives = object.directives?.map(e => TypeDirective.fromPartial(e)) || [];
        message.fields = object.fields?.map(e => TypeField.fromPartial(e)) || [];
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
