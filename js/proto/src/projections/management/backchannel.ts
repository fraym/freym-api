// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: projections/management/backchannel.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface BackchannelRequest {
    type: string;
    payload: { [key: string]: string };
}

export interface BackchannelRequest_PayloadEntry {
    key: string;
    value: string;
}

export interface BackchannelResponse {}

function createBaseBackchannelRequest(): BackchannelRequest {
    return { type: "", payload: {} };
}

export const BackchannelRequest: MessageFns<BackchannelRequest> = {
    encode(message: BackchannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        Object.entries(message.payload).forEach(([key, value]) => {
            BackchannelRequest_PayloadEntry.encode(
                { key: key as any, value },
                writer.uint32(18).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    const entry2 = BackchannelRequest_PayloadEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.payload[entry2.key] = entry2.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): BackchannelRequest {
        return {
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            payload: isObject(object.payload)
                ? Object.entries(object.payload).reduce<{ [key: string]: string }>(
                      (acc, [key, value]) => {
                          acc[key] = String(value);
                          return acc;
                      },
                      {}
                  )
                : {},
        };
    },

    toJSON(message: BackchannelRequest): unknown {
        const obj: any = {};
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.payload) {
            const entries = Object.entries(message.payload);
            if (entries.length > 0) {
                obj.payload = {};
                entries.forEach(([k, v]) => {
                    obj.payload[k] = v;
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<BackchannelRequest>): BackchannelRequest {
        return BackchannelRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<BackchannelRequest>): BackchannelRequest {
        const message = createBaseBackchannelRequest();
        message.type = object.type ?? "";
        message.payload = Object.entries(object.payload ?? {}).reduce<{ [key: string]: string }>(
            (acc, [key, value]) => {
                if (value !== undefined) {
                    acc[key] = globalThis.String(value);
                }
                return acc;
            },
            {}
        );
        return message;
    },
};

function createBaseBackchannelRequest_PayloadEntry(): BackchannelRequest_PayloadEntry {
    return { key: "", value: "" };
}

export const BackchannelRequest_PayloadEntry: MessageFns<BackchannelRequest_PayloadEntry> = {
    encode(
        message: BackchannelRequest_PayloadEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelRequest_PayloadEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelRequest_PayloadEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): BackchannelRequest_PayloadEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },

    toJSON(message: BackchannelRequest_PayloadEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },

    create(base?: DeepPartial<BackchannelRequest_PayloadEntry>): BackchannelRequest_PayloadEntry {
        return BackchannelRequest_PayloadEntry.fromPartial(base ?? {});
    },
    fromPartial(
        object: DeepPartial<BackchannelRequest_PayloadEntry>
    ): BackchannelRequest_PayloadEntry {
        const message = createBaseBackchannelRequest_PayloadEntry();
        message.key = object.key ?? "";
        message.value = object.value ?? "";
        return message;
    },
};

function createBaseBackchannelResponse(): BackchannelResponse {
    return {};
}

export const BackchannelResponse: MessageFns<BackchannelResponse> = {
    encode(_: BackchannelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): BackchannelResponse {
        return {};
    },

    toJSON(_: BackchannelResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<BackchannelResponse>): BackchannelResponse {
        return BackchannelResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<BackchannelResponse>): BackchannelResponse {
        const message = createBaseBackchannelResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isObject(value: any): boolean {
    return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
