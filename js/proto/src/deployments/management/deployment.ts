// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: deployments/management/deployment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface GetDeploymentRequest {
    deploymentId: string;
}

export interface GetDeploymentResponse {
    components: ServiceStatus[];
}

export interface ServiceStatus {
    serviceName: string;
    progress: number;
}

function createBaseGetDeploymentRequest(): GetDeploymentRequest {
    return { deploymentId: "0" };
}

export const GetDeploymentRequest: MessageFns<GetDeploymentRequest> = {
    encode(message: GetDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.deploymentId !== "0") {
            writer.uint32(8).int64(message.deploymentId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDeploymentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }

                    message.deploymentId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetDeploymentRequest {
        return {
            deploymentId: isSet(object.deploymentId) ? globalThis.String(object.deploymentId) : "0",
        };
    },

    toJSON(message: GetDeploymentRequest): unknown {
        const obj: any = {};
        if (message.deploymentId !== "0") {
            obj.deploymentId = message.deploymentId;
        }
        return obj;
    },

    create(base?: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
        return GetDeploymentRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetDeploymentRequest>): GetDeploymentRequest {
        const message = createBaseGetDeploymentRequest();
        message.deploymentId = object.deploymentId ?? "0";
        return message;
    },
};

function createBaseGetDeploymentResponse(): GetDeploymentResponse {
    return { components: [] };
}

export const GetDeploymentResponse: MessageFns<GetDeploymentResponse> = {
    encode(
        message: GetDeploymentResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        for (const v of message.components) {
            ServiceStatus.encode(v!, writer.uint32(10).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): GetDeploymentResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetDeploymentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.components.push(ServiceStatus.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): GetDeploymentResponse {
        return {
            components: globalThis.Array.isArray(object?.components)
                ? object.components.map((e: any) => ServiceStatus.fromJSON(e))
                : [],
        };
    },

    toJSON(message: GetDeploymentResponse): unknown {
        const obj: any = {};
        if (message.components?.length) {
            obj.components = message.components.map(e => ServiceStatus.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<GetDeploymentResponse>): GetDeploymentResponse {
        return GetDeploymentResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<GetDeploymentResponse>): GetDeploymentResponse {
        const message = createBaseGetDeploymentResponse();
        message.components = object.components?.map(e => ServiceStatus.fromPartial(e)) || [];
        return message;
    },
};

function createBaseServiceStatus(): ServiceStatus {
    return { serviceName: "", progress: 0 };
}

export const ServiceStatus: MessageFns<ServiceStatus> = {
    encode(message: ServiceStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.serviceName !== "") {
            writer.uint32(10).string(message.serviceName);
        }
        if (message.progress !== 0) {
            writer.uint32(16).uint32(message.progress);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ServiceStatus {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseServiceStatus();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.serviceName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }

                    message.progress = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ServiceStatus {
        return {
            serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
            progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
        };
    },

    toJSON(message: ServiceStatus): unknown {
        const obj: any = {};
        if (message.serviceName !== "") {
            obj.serviceName = message.serviceName;
        }
        if (message.progress !== 0) {
            obj.progress = Math.round(message.progress);
        }
        return obj;
    },

    create(base?: DeepPartial<ServiceStatus>): ServiceStatus {
        return ServiceStatus.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ServiceStatus>): ServiceStatus {
        const message = createBaseServiceStatus();
        message.serviceName = object.serviceName ?? "";
        message.progress = object.progress ?? 0;
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
