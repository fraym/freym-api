// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: sync/management/lock.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface LockRequest {
    lockId: string;
    app: string;
    tenant: string;
    ip: string;
    ttl: number;
    resource: string[];
}

export interface LockResponse {
    lockId: string;
}

export interface RLockRequest {
    lockId: string;
    app: string;
    tenant: string;
    ip: string;
    ttl: number;
    resource: string[];
}

export interface RLockResponse {
    lockId: string;
}

export interface UnlockRequest {
    lockId: string;
    app: string;
    tenant: string;
    resource: string[];
}

export interface UnlockResponse {}

export interface RUnlockRequest {
    lockId: string;
    app: string;
    tenant: string;
    resource: string[];
}

export interface RUnlockResponse {}

export interface ExtendTTLRequest {
    lockId: string;
    app: string;
    tenant: string;
    resource: string[];
    ttl: number;
}

export interface ExtendTTLResponse {}

function createBaseLockRequest(): LockRequest {
    return { lockId: "", app: "", tenant: "", ip: "", ttl: 0, resource: [] };
}

export const LockRequest: MessageFns<LockRequest> = {
    encode(message: LockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        if (message.app !== "") {
            writer.uint32(18).string(message.app);
        }
        if (message.tenant !== "") {
            writer.uint32(26).string(message.tenant);
        }
        if (message.ip !== "") {
            writer.uint32(34).string(message.ip);
        }
        if (message.ttl !== 0) {
            writer.uint32(40).int32(message.ttl);
        }
        for (const v of message.resource) {
            writer.uint32(50).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): LockRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.tenant = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.ip = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }

                    message.ttl = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.resource.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): LockRequest {
        return {
            lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "",
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : "",
            ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
            ttl: isSet(object.ttl) ? globalThis.Number(object.ttl) : 0,
            resource: globalThis.Array.isArray(object?.resource)
                ? object.resource.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: LockRequest): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tenant !== "") {
            obj.tenant = message.tenant;
        }
        if (message.ip !== "") {
            obj.ip = message.ip;
        }
        if (message.ttl !== 0) {
            obj.ttl = Math.round(message.ttl);
        }
        if (message.resource?.length) {
            obj.resource = message.resource;
        }
        return obj;
    },

    create(base?: DeepPartial<LockRequest>): LockRequest {
        return LockRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<LockRequest>): LockRequest {
        const message = createBaseLockRequest();
        message.lockId = object.lockId ?? "";
        message.app = object.app ?? "";
        message.tenant = object.tenant ?? "";
        message.ip = object.ip ?? "";
        message.ttl = object.ttl ?? 0;
        message.resource = object.resource?.map(e => e) || [];
        return message;
    },
};

function createBaseLockResponse(): LockResponse {
    return { lockId: "" };
}

export const LockResponse: MessageFns<LockResponse> = {
    encode(message: LockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): LockResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): LockResponse {
        return { lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "" };
    },

    toJSON(message: LockResponse): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        return obj;
    },

    create(base?: DeepPartial<LockResponse>): LockResponse {
        return LockResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<LockResponse>): LockResponse {
        const message = createBaseLockResponse();
        message.lockId = object.lockId ?? "";
        return message;
    },
};

function createBaseRLockRequest(): RLockRequest {
    return { lockId: "", app: "", tenant: "", ip: "", ttl: 0, resource: [] };
}

export const RLockRequest: MessageFns<RLockRequest> = {
    encode(message: RLockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        if (message.app !== "") {
            writer.uint32(18).string(message.app);
        }
        if (message.tenant !== "") {
            writer.uint32(26).string(message.tenant);
        }
        if (message.ip !== "") {
            writer.uint32(34).string(message.ip);
        }
        if (message.ttl !== 0) {
            writer.uint32(40).int32(message.ttl);
        }
        for (const v of message.resource) {
            writer.uint32(50).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RLockRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRLockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.tenant = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.ip = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }

                    message.ttl = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.resource.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RLockRequest {
        return {
            lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "",
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : "",
            ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
            ttl: isSet(object.ttl) ? globalThis.Number(object.ttl) : 0,
            resource: globalThis.Array.isArray(object?.resource)
                ? object.resource.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: RLockRequest): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tenant !== "") {
            obj.tenant = message.tenant;
        }
        if (message.ip !== "") {
            obj.ip = message.ip;
        }
        if (message.ttl !== 0) {
            obj.ttl = Math.round(message.ttl);
        }
        if (message.resource?.length) {
            obj.resource = message.resource;
        }
        return obj;
    },

    create(base?: DeepPartial<RLockRequest>): RLockRequest {
        return RLockRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RLockRequest>): RLockRequest {
        const message = createBaseRLockRequest();
        message.lockId = object.lockId ?? "";
        message.app = object.app ?? "";
        message.tenant = object.tenant ?? "";
        message.ip = object.ip ?? "";
        message.ttl = object.ttl ?? 0;
        message.resource = object.resource?.map(e => e) || [];
        return message;
    },
};

function createBaseRLockResponse(): RLockResponse {
    return { lockId: "" };
}

export const RLockResponse: MessageFns<RLockResponse> = {
    encode(message: RLockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RLockResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRLockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RLockResponse {
        return { lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "" };
    },

    toJSON(message: RLockResponse): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        return obj;
    },

    create(base?: DeepPartial<RLockResponse>): RLockResponse {
        return RLockResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RLockResponse>): RLockResponse {
        const message = createBaseRLockResponse();
        message.lockId = object.lockId ?? "";
        return message;
    },
};

function createBaseUnlockRequest(): UnlockRequest {
    return { lockId: "", app: "", tenant: "", resource: [] };
}

export const UnlockRequest: MessageFns<UnlockRequest> = {
    encode(message: UnlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        if (message.app !== "") {
            writer.uint32(18).string(message.app);
        }
        if (message.tenant !== "") {
            writer.uint32(26).string(message.tenant);
        }
        for (const v of message.resource) {
            writer.uint32(34).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UnlockRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.tenant = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.resource.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): UnlockRequest {
        return {
            lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "",
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : "",
            resource: globalThis.Array.isArray(object?.resource)
                ? object.resource.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: UnlockRequest): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tenant !== "") {
            obj.tenant = message.tenant;
        }
        if (message.resource?.length) {
            obj.resource = message.resource;
        }
        return obj;
    },

    create(base?: DeepPartial<UnlockRequest>): UnlockRequest {
        return UnlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<UnlockRequest>): UnlockRequest {
        const message = createBaseUnlockRequest();
        message.lockId = object.lockId ?? "";
        message.app = object.app ?? "";
        message.tenant = object.tenant ?? "";
        message.resource = object.resource?.map(e => e) || [];
        return message;
    },
};

function createBaseUnlockResponse(): UnlockResponse {
    return {};
}

export const UnlockResponse: MessageFns<UnlockResponse> = {
    encode(_: UnlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): UnlockResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): UnlockResponse {
        return {};
    },

    toJSON(_: UnlockResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<UnlockResponse>): UnlockResponse {
        return UnlockResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<UnlockResponse>): UnlockResponse {
        const message = createBaseUnlockResponse();
        return message;
    },
};

function createBaseRUnlockRequest(): RUnlockRequest {
    return { lockId: "", app: "", tenant: "", resource: [] };
}

export const RUnlockRequest: MessageFns<RUnlockRequest> = {
    encode(message: RUnlockRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        if (message.app !== "") {
            writer.uint32(18).string(message.app);
        }
        if (message.tenant !== "") {
            writer.uint32(26).string(message.tenant);
        }
        for (const v of message.resource) {
            writer.uint32(34).string(v!);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RUnlockRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRUnlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.tenant = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.resource.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RUnlockRequest {
        return {
            lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "",
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : "",
            resource: globalThis.Array.isArray(object?.resource)
                ? object.resource.map((e: any) => globalThis.String(e))
                : [],
        };
    },

    toJSON(message: RUnlockRequest): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tenant !== "") {
            obj.tenant = message.tenant;
        }
        if (message.resource?.length) {
            obj.resource = message.resource;
        }
        return obj;
    },

    create(base?: DeepPartial<RUnlockRequest>): RUnlockRequest {
        return RUnlockRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RUnlockRequest>): RUnlockRequest {
        const message = createBaseRUnlockRequest();
        message.lockId = object.lockId ?? "";
        message.app = object.app ?? "";
        message.tenant = object.tenant ?? "";
        message.resource = object.resource?.map(e => e) || [];
        return message;
    },
};

function createBaseRUnlockResponse(): RUnlockResponse {
    return {};
}

export const RUnlockResponse: MessageFns<RUnlockResponse> = {
    encode(_: RUnlockResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RUnlockResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRUnlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): RUnlockResponse {
        return {};
    },

    toJSON(_: RUnlockResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<RUnlockResponse>): RUnlockResponse {
        return RUnlockResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<RUnlockResponse>): RUnlockResponse {
        const message = createBaseRUnlockResponse();
        return message;
    },
};

function createBaseExtendTTLRequest(): ExtendTTLRequest {
    return { lockId: "", app: "", tenant: "", resource: [], ttl: 0 };
}

export const ExtendTTLRequest: MessageFns<ExtendTTLRequest> = {
    encode(message: ExtendTTLRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.lockId !== "") {
            writer.uint32(10).string(message.lockId);
        }
        if (message.app !== "") {
            writer.uint32(18).string(message.app);
        }
        if (message.tenant !== "") {
            writer.uint32(26).string(message.tenant);
        }
        for (const v of message.resource) {
            writer.uint32(34).string(v!);
        }
        if (message.ttl !== 0) {
            writer.uint32(40).int32(message.ttl);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ExtendTTLRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtendTTLRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.lockId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.app = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.tenant = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.resource.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }

                    message.ttl = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ExtendTTLRequest {
        return {
            lockId: isSet(object.lockId) ? globalThis.String(object.lockId) : "",
            app: isSet(object.app) ? globalThis.String(object.app) : "",
            tenant: isSet(object.tenant) ? globalThis.String(object.tenant) : "",
            resource: globalThis.Array.isArray(object?.resource)
                ? object.resource.map((e: any) => globalThis.String(e))
                : [],
            ttl: isSet(object.ttl) ? globalThis.Number(object.ttl) : 0,
        };
    },

    toJSON(message: ExtendTTLRequest): unknown {
        const obj: any = {};
        if (message.lockId !== "") {
            obj.lockId = message.lockId;
        }
        if (message.app !== "") {
            obj.app = message.app;
        }
        if (message.tenant !== "") {
            obj.tenant = message.tenant;
        }
        if (message.resource?.length) {
            obj.resource = message.resource;
        }
        if (message.ttl !== 0) {
            obj.ttl = Math.round(message.ttl);
        }
        return obj;
    },

    create(base?: DeepPartial<ExtendTTLRequest>): ExtendTTLRequest {
        return ExtendTTLRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ExtendTTLRequest>): ExtendTTLRequest {
        const message = createBaseExtendTTLRequest();
        message.lockId = object.lockId ?? "";
        message.app = object.app ?? "";
        message.tenant = object.tenant ?? "";
        message.resource = object.resource?.map(e => e) || [];
        message.ttl = object.ttl ?? 0;
        return message;
    },
};

function createBaseExtendTTLResponse(): ExtendTTLResponse {
    return {};
}

export const ExtendTTLResponse: MessageFns<ExtendTTLResponse> = {
    encode(_: ExtendTTLResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ExtendTTLResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtendTTLResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): ExtendTTLResponse {
        return {};
    },

    toJSON(_: ExtendTTLResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<ExtendTTLResponse>): ExtendTTLResponse {
        return ExtendTTLResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<ExtendTTLResponse>): ExtendTTLResponse {
        const message = createBaseExtendTTLResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
