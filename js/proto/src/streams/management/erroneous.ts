// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: streams/management/erroneous.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Event } from "./event";

export interface ListErroneousEventsRequest {
    tenantId: string;
    topic: string;
    eventTypes: string[];
    limit: string;
}

export interface ListErroneousEventsResponse {
    events: ErroneousEvent[];
}

export interface ErroneousEvent {
    event: Event | undefined;
    consumerGroup: string;
    error: string;
}

export interface ResendErroneousEventRequest {
    tenantId: string;
    topic: string;
    consumerGroup: string;
    eventId: string;
}

export interface ResendErroneousEventResponse {}

function createBaseListErroneousEventsRequest(): ListErroneousEventsRequest {
    return { tenantId: "", topic: "", eventTypes: [], limit: "0" };
}

export const ListErroneousEventsRequest: MessageFns<ListErroneousEventsRequest> = {
    encode(
        message: ListErroneousEventsRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        for (const v of message.eventTypes) {
            writer.uint32(26).string(v!);
        }
        if (message.limit !== "0") {
            writer.uint32(32).int64(message.limit);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ListErroneousEventsRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListErroneousEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.eventTypes.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }

                    message.limit = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ListErroneousEventsRequest {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            eventTypes: globalThis.Array.isArray(object?.eventTypes)
                ? object.eventTypes.map((e: any) => globalThis.String(e))
                : [],
            limit: isSet(object.limit) ? globalThis.String(object.limit) : "0",
        };
    },

    toJSON(message: ListErroneousEventsRequest): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.eventTypes?.length) {
            obj.eventTypes = message.eventTypes;
        }
        if (message.limit !== "0") {
            obj.limit = message.limit;
        }
        return obj;
    },

    create(base?: DeepPartial<ListErroneousEventsRequest>): ListErroneousEventsRequest {
        return ListErroneousEventsRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ListErroneousEventsRequest>): ListErroneousEventsRequest {
        const message = createBaseListErroneousEventsRequest();
        message.tenantId = object.tenantId ?? "";
        message.topic = object.topic ?? "";
        message.eventTypes = object.eventTypes?.map(e => e) || [];
        message.limit = object.limit ?? "0";
        return message;
    },
};

function createBaseListErroneousEventsResponse(): ListErroneousEventsResponse {
    return { events: [] };
}

export const ListErroneousEventsResponse: MessageFns<ListErroneousEventsResponse> = {
    encode(
        message: ListErroneousEventsResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        for (const v of message.events) {
            ErroneousEvent.encode(v!, writer.uint32(10).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ListErroneousEventsResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListErroneousEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.events.push(ErroneousEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ListErroneousEventsResponse {
        return {
            events: globalThis.Array.isArray(object?.events)
                ? object.events.map((e: any) => ErroneousEvent.fromJSON(e))
                : [],
        };
    },

    toJSON(message: ListErroneousEventsResponse): unknown {
        const obj: any = {};
        if (message.events?.length) {
            obj.events = message.events.map(e => ErroneousEvent.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<ListErroneousEventsResponse>): ListErroneousEventsResponse {
        return ListErroneousEventsResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ListErroneousEventsResponse>): ListErroneousEventsResponse {
        const message = createBaseListErroneousEventsResponse();
        message.events = object.events?.map(e => ErroneousEvent.fromPartial(e)) || [];
        return message;
    },
};

function createBaseErroneousEvent(): ErroneousEvent {
    return { event: undefined, consumerGroup: "", error: "" };
}

export const ErroneousEvent: MessageFns<ErroneousEvent> = {
    encode(message: ErroneousEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.event !== undefined) {
            Event.encode(message.event, writer.uint32(10).fork()).join();
        }
        if (message.consumerGroup !== "") {
            writer.uint32(18).string(message.consumerGroup);
        }
        if (message.error !== "") {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ErroneousEvent {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseErroneousEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.event = Event.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.consumerGroup = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.error = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ErroneousEvent {
        return {
            event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
            consumerGroup: isSet(object.consumerGroup)
                ? globalThis.String(object.consumerGroup)
                : "",
            error: isSet(object.error) ? globalThis.String(object.error) : "",
        };
    },

    toJSON(message: ErroneousEvent): unknown {
        const obj: any = {};
        if (message.event !== undefined) {
            obj.event = Event.toJSON(message.event);
        }
        if (message.consumerGroup !== "") {
            obj.consumerGroup = message.consumerGroup;
        }
        if (message.error !== "") {
            obj.error = message.error;
        }
        return obj;
    },

    create(base?: DeepPartial<ErroneousEvent>): ErroneousEvent {
        return ErroneousEvent.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ErroneousEvent>): ErroneousEvent {
        const message = createBaseErroneousEvent();
        message.event =
            object.event !== undefined && object.event !== null
                ? Event.fromPartial(object.event)
                : undefined;
        message.consumerGroup = object.consumerGroup ?? "";
        message.error = object.error ?? "";
        return message;
    },
};

function createBaseResendErroneousEventRequest(): ResendErroneousEventRequest {
    return { tenantId: "", topic: "", consumerGroup: "", eventId: "" };
}

export const ResendErroneousEventRequest: MessageFns<ResendErroneousEventRequest> = {
    encode(
        message: ResendErroneousEventRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        if (message.consumerGroup !== "") {
            writer.uint32(26).string(message.consumerGroup);
        }
        if (message.eventId !== "") {
            writer.uint32(34).string(message.eventId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ResendErroneousEventRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendErroneousEventRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.consumerGroup = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.eventId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): ResendErroneousEventRequest {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            consumerGroup: isSet(object.consumerGroup)
                ? globalThis.String(object.consumerGroup)
                : "",
            eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
        };
    },

    toJSON(message: ResendErroneousEventRequest): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.consumerGroup !== "") {
            obj.consumerGroup = message.consumerGroup;
        }
        if (message.eventId !== "") {
            obj.eventId = message.eventId;
        }
        return obj;
    },

    create(base?: DeepPartial<ResendErroneousEventRequest>): ResendErroneousEventRequest {
        return ResendErroneousEventRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<ResendErroneousEventRequest>): ResendErroneousEventRequest {
        const message = createBaseResendErroneousEventRequest();
        message.tenantId = object.tenantId ?? "";
        message.topic = object.topic ?? "";
        message.consumerGroup = object.consumerGroup ?? "";
        message.eventId = object.eventId ?? "";
        return message;
    },
};

function createBaseResendErroneousEventResponse(): ResendErroneousEventResponse {
    return {};
}

export const ResendErroneousEventResponse: MessageFns<ResendErroneousEventResponse> = {
    encode(
        _: ResendErroneousEventResponse,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ResendErroneousEventResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseResendErroneousEventResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): ResendErroneousEventResponse {
        return {};
    },

    toJSON(_: ResendErroneousEventResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<ResendErroneousEventResponse>): ResendErroneousEventResponse {
        return ResendErroneousEventResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<ResendErroneousEventResponse>): ResendErroneousEventResponse {
        const message = createBaseResendErroneousEventResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
