// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: streams/management/transaction.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface WaitForTransactionalConsistencyRequest {
    tenantId: string;
    topic: string;
    subscriberGroup: string;
    correlationId: string;
}

export interface WaitForTransactionalConsistencyResponse {
    success: boolean;
    error: string;
}

function createBaseWaitForTransactionalConsistencyRequest(): WaitForTransactionalConsistencyRequest {
    return { tenantId: "", topic: "", subscriberGroup: "", correlationId: "" };
}

export const WaitForTransactionalConsistencyRequest: MessageFns<WaitForTransactionalConsistencyRequest> =
    {
        encode(
            message: WaitForTransactionalConsistencyRequest,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.tenantId !== "") {
                writer.uint32(10).string(message.tenantId);
            }
            if (message.topic !== "") {
                writer.uint32(18).string(message.topic);
            }
            if (message.subscriberGroup !== "") {
                writer.uint32(26).string(message.subscriberGroup);
            }
            if (message.correlationId !== "") {
                writer.uint32(34).string(message.correlationId);
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): WaitForTransactionalConsistencyRequest {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseWaitForTransactionalConsistencyRequest();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 10) {
                            break;
                        }

                        message.tenantId = reader.string();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.topic = reader.string();
                        continue;
                    }
                    case 3: {
                        if (tag !== 26) {
                            break;
                        }

                        message.subscriberGroup = reader.string();
                        continue;
                    }
                    case 4: {
                        if (tag !== 34) {
                            break;
                        }

                        message.correlationId = reader.string();
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): WaitForTransactionalConsistencyRequest {
            return {
                tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
                topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
                subscriberGroup: isSet(object.subscriberGroup)
                    ? globalThis.String(object.subscriberGroup)
                    : "",
                correlationId: isSet(object.correlationId)
                    ? globalThis.String(object.correlationId)
                    : "",
            };
        },

        toJSON(message: WaitForTransactionalConsistencyRequest): unknown {
            const obj: any = {};
            if (message.tenantId !== "") {
                obj.tenantId = message.tenantId;
            }
            if (message.topic !== "") {
                obj.topic = message.topic;
            }
            if (message.subscriberGroup !== "") {
                obj.subscriberGroup = message.subscriberGroup;
            }
            if (message.correlationId !== "") {
                obj.correlationId = message.correlationId;
            }
            return obj;
        },

        create(
            base?: DeepPartial<WaitForTransactionalConsistencyRequest>
        ): WaitForTransactionalConsistencyRequest {
            return WaitForTransactionalConsistencyRequest.fromPartial(base ?? {});
        },
        fromPartial(
            object: DeepPartial<WaitForTransactionalConsistencyRequest>
        ): WaitForTransactionalConsistencyRequest {
            const message = createBaseWaitForTransactionalConsistencyRequest();
            message.tenantId = object.tenantId ?? "";
            message.topic = object.topic ?? "";
            message.subscriberGroup = object.subscriberGroup ?? "";
            message.correlationId = object.correlationId ?? "";
            return message;
        },
    };

function createBaseWaitForTransactionalConsistencyResponse(): WaitForTransactionalConsistencyResponse {
    return { success: false, error: "" };
}

export const WaitForTransactionalConsistencyResponse: MessageFns<WaitForTransactionalConsistencyResponse> =
    {
        encode(
            message: WaitForTransactionalConsistencyResponse,
            writer: BinaryWriter = new BinaryWriter()
        ): BinaryWriter {
            if (message.success !== false) {
                writer.uint32(8).bool(message.success);
            }
            if (message.error !== "") {
                writer.uint32(18).string(message.error);
            }
            return writer;
        },

        decode(
            input: BinaryReader | Uint8Array,
            length?: number
        ): WaitForTransactionalConsistencyResponse {
            const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
            const end = length === undefined ? reader.len : reader.pos + length;
            const message = createBaseWaitForTransactionalConsistencyResponse();
            while (reader.pos < end) {
                const tag = reader.uint32();
                switch (tag >>> 3) {
                    case 1: {
                        if (tag !== 8) {
                            break;
                        }

                        message.success = reader.bool();
                        continue;
                    }
                    case 2: {
                        if (tag !== 18) {
                            break;
                        }

                        message.error = reader.string();
                        continue;
                    }
                }
                if ((tag & 7) === 4 || tag === 0) {
                    break;
                }
                reader.skip(tag & 7);
            }
            return message;
        },

        fromJSON(object: any): WaitForTransactionalConsistencyResponse {
            return {
                success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
                error: isSet(object.error) ? globalThis.String(object.error) : "",
            };
        },

        toJSON(message: WaitForTransactionalConsistencyResponse): unknown {
            const obj: any = {};
            if (message.success !== false) {
                obj.success = message.success;
            }
            if (message.error !== "") {
                obj.error = message.error;
            }
            return obj;
        },

        create(
            base?: DeepPartial<WaitForTransactionalConsistencyResponse>
        ): WaitForTransactionalConsistencyResponse {
            return WaitForTransactionalConsistencyResponse.fromPartial(base ?? {});
        },
        fromPartial(
            object: DeepPartial<WaitForTransactionalConsistencyResponse>
        ): WaitForTransactionalConsistencyResponse {
            const message = createBaseWaitForTransactionalConsistencyResponse();
            message.success = object.success ?? false;
            message.error = object.error ?? "";
            return message;
        },
    };

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
