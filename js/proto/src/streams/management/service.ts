// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: streams/management/service.proto
import {
    type CallOptions,
    ChannelCredentials,
    Client,
    type ClientDuplexStream,
    type ClientOptions,
    type ClientUnaryCall,
    Metadata,
    type ServiceError,
    type UntypedServiceImplementation,
    type handleBidiStreamingCall,
    type handleUnaryCall,
    makeGenericClientConstructor,
} from "@grpc/grpc-js";
import { BackchannelEventRequest, BackchannelEventResponse } from "./backchannel";
import { Event, GetEventRequest, GetLastEventByTypesRequest, GetLastEventRequest } from "./event";
import {
    IntroduceGdprOnEventFieldRequest,
    IntroduceGdprOnEventFieldResponse,
    InvalidateGdprRequest,
    InvalidateGdprResponse,
} from "./gdpr";
import {
    PaginateEventsAfterEventIdRequest,
    PaginateEventsAfterEventIdResponse,
    PaginateEventsRequest,
    PaginateEventsResponse,
    PaginateStreamAfterEventIdRequest,
    PaginateStreamAfterEventIdResponse,
    PaginateStreamRequest,
    PaginateStreamResponse,
} from "./paginate";
import { PublishRequest, PublishResponse } from "./publish";
import { CreateStreamSnapshotRequest, CreateStreamSnapshotResponse } from "./snapshot";
import { IsStreamEmptyRequest, IsStreamEmptyResponse } from "./stream";
import { SubscribeRequest, SubscribeResponse } from "./subscribe";

export type ServiceService = typeof ServiceService;
export const ServiceService = {
    publish: {
        path: "/freym.streams.management.Service/Publish",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: PublishRequest) =>
            Buffer.from(PublishRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => PublishRequest.decode(value),
        responseSerialize: (value: PublishResponse) =>
            Buffer.from(PublishResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => PublishResponse.decode(value),
    },
    subscribe: {
        path: "/freym.streams.management.Service/Subscribe",
        requestStream: true,
        responseStream: true,
        requestSerialize: (value: SubscribeRequest) =>
            Buffer.from(SubscribeRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => SubscribeRequest.decode(value),
        responseSerialize: (value: SubscribeResponse) =>
            Buffer.from(SubscribeResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => SubscribeResponse.decode(value),
    },
    getEvent: {
        path: "/freym.streams.management.Service/GetEvent",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetEventRequest) =>
            Buffer.from(GetEventRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetEventRequest.decode(value),
        responseSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
        responseDeserialize: (value: Buffer) => Event.decode(value),
    },
    getLastEvent: {
        path: "/freym.streams.management.Service/GetLastEvent",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetLastEventRequest) =>
            Buffer.from(GetLastEventRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetLastEventRequest.decode(value),
        responseSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
        responseDeserialize: (value: Buffer) => Event.decode(value),
    },
    getLastEventByTypes: {
        path: "/freym.streams.management.Service/GetLastEventByTypes",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: GetLastEventByTypesRequest) =>
            Buffer.from(GetLastEventByTypesRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => GetLastEventByTypesRequest.decode(value),
        responseSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
        responseDeserialize: (value: Buffer) => Event.decode(value),
    },
    isStreamEmpty: {
        path: "/freym.streams.management.Service/IsStreamEmpty",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: IsStreamEmptyRequest) =>
            Buffer.from(IsStreamEmptyRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => IsStreamEmptyRequest.decode(value),
        responseSerialize: (value: IsStreamEmptyResponse) =>
            Buffer.from(IsStreamEmptyResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => IsStreamEmptyResponse.decode(value),
    },
    paginateStream: {
        path: "/freym.streams.management.Service/PaginateStream",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: PaginateStreamRequest) =>
            Buffer.from(PaginateStreamRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => PaginateStreamRequest.decode(value),
        responseSerialize: (value: PaginateStreamResponse) =>
            Buffer.from(PaginateStreamResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => PaginateStreamResponse.decode(value),
    },
    paginateStreamAfterEventId: {
        path: "/freym.streams.management.Service/PaginateStreamAfterEventId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: PaginateStreamAfterEventIdRequest) =>
            Buffer.from(PaginateStreamAfterEventIdRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => PaginateStreamAfterEventIdRequest.decode(value),
        responseSerialize: (value: PaginateStreamAfterEventIdResponse) =>
            Buffer.from(PaginateStreamAfterEventIdResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => PaginateStreamAfterEventIdResponse.decode(value),
    },
    paginateEvents: {
        path: "/freym.streams.management.Service/PaginateEvents",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: PaginateEventsRequest) =>
            Buffer.from(PaginateEventsRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => PaginateEventsRequest.decode(value),
        responseSerialize: (value: PaginateEventsResponse) =>
            Buffer.from(PaginateEventsResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => PaginateEventsResponse.decode(value),
    },
    paginateEventsAfterEventId: {
        path: "/freym.streams.management.Service/PaginateEventsAfterEventId",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: PaginateEventsAfterEventIdRequest) =>
            Buffer.from(PaginateEventsAfterEventIdRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => PaginateEventsAfterEventIdRequest.decode(value),
        responseSerialize: (value: PaginateEventsAfterEventIdResponse) =>
            Buffer.from(PaginateEventsAfterEventIdResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => PaginateEventsAfterEventIdResponse.decode(value),
    },
    introduceGdprOnEventField: {
        path: "/freym.streams.management.Service/IntroduceGdprOnEventField",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: IntroduceGdprOnEventFieldRequest) =>
            Buffer.from(IntroduceGdprOnEventFieldRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => IntroduceGdprOnEventFieldRequest.decode(value),
        responseSerialize: (value: IntroduceGdprOnEventFieldResponse) =>
            Buffer.from(IntroduceGdprOnEventFieldResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => IntroduceGdprOnEventFieldResponse.decode(value),
    },
    invalidateGdpr: {
        path: "/freym.streams.management.Service/InvalidateGdpr",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: InvalidateGdprRequest) =>
            Buffer.from(InvalidateGdprRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => InvalidateGdprRequest.decode(value),
        responseSerialize: (value: InvalidateGdprResponse) =>
            Buffer.from(InvalidateGdprResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => InvalidateGdprResponse.decode(value),
    },
    backchannelEvent: {
        path: "/freym.streams.management.Service/BackchannelEvent",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: BackchannelEventRequest) =>
            Buffer.from(BackchannelEventRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => BackchannelEventRequest.decode(value),
        responseSerialize: (value: BackchannelEventResponse) =>
            Buffer.from(BackchannelEventResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => BackchannelEventResponse.decode(value),
    },
    createStreamSnapshot: {
        path: "/freym.streams.management.Service/CreateStreamSnapshot",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value: CreateStreamSnapshotRequest) =>
            Buffer.from(CreateStreamSnapshotRequest.encode(value).finish()),
        requestDeserialize: (value: Buffer) => CreateStreamSnapshotRequest.decode(value),
        responseSerialize: (value: CreateStreamSnapshotResponse) =>
            Buffer.from(CreateStreamSnapshotResponse.encode(value).finish()),
        responseDeserialize: (value: Buffer) => CreateStreamSnapshotResponse.decode(value),
    },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
    publish: handleUnaryCall<PublishRequest, PublishResponse>;
    subscribe: handleBidiStreamingCall<SubscribeRequest, SubscribeResponse>;
    getEvent: handleUnaryCall<GetEventRequest, Event>;
    getLastEvent: handleUnaryCall<GetLastEventRequest, Event>;
    getLastEventByTypes: handleUnaryCall<GetLastEventByTypesRequest, Event>;
    isStreamEmpty: handleUnaryCall<IsStreamEmptyRequest, IsStreamEmptyResponse>;
    paginateStream: handleUnaryCall<PaginateStreamRequest, PaginateStreamResponse>;
    paginateStreamAfterEventId: handleUnaryCall<
        PaginateStreamAfterEventIdRequest,
        PaginateStreamAfterEventIdResponse
    >;
    paginateEvents: handleUnaryCall<PaginateEventsRequest, PaginateEventsResponse>;
    paginateEventsAfterEventId: handleUnaryCall<
        PaginateEventsAfterEventIdRequest,
        PaginateEventsAfterEventIdResponse
    >;
    introduceGdprOnEventField: handleUnaryCall<
        IntroduceGdprOnEventFieldRequest,
        IntroduceGdprOnEventFieldResponse
    >;
    invalidateGdpr: handleUnaryCall<InvalidateGdprRequest, InvalidateGdprResponse>;
    backchannelEvent: handleUnaryCall<BackchannelEventRequest, BackchannelEventResponse>;
    createStreamSnapshot: handleUnaryCall<
        CreateStreamSnapshotRequest,
        CreateStreamSnapshotResponse
    >;
}

export interface ServiceClient extends Client {
    publish(
        request: PublishRequest,
        callback: (error: ServiceError | null, response: PublishResponse) => void
    ): ClientUnaryCall;
    publish(
        request: PublishRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: PublishResponse) => void
    ): ClientUnaryCall;
    publish(
        request: PublishRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: PublishResponse) => void
    ): ClientUnaryCall;
    subscribe(): ClientDuplexStream<SubscribeRequest, SubscribeResponse>;
    subscribe(
        options: Partial<CallOptions>
    ): ClientDuplexStream<SubscribeRequest, SubscribeResponse>;
    subscribe(
        metadata: Metadata,
        options?: Partial<CallOptions>
    ): ClientDuplexStream<SubscribeRequest, SubscribeResponse>;
    getEvent(
        request: GetEventRequest,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getEvent(
        request: GetEventRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getEvent(
        request: GetEventRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEvent(
        request: GetLastEventRequest,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEvent(
        request: GetLastEventRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEvent(
        request: GetLastEventRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEventByTypes(
        request: GetLastEventByTypesRequest,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEventByTypes(
        request: GetLastEventByTypesRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    getLastEventByTypes(
        request: GetLastEventByTypesRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: Event) => void
    ): ClientUnaryCall;
    isStreamEmpty(
        request: IsStreamEmptyRequest,
        callback: (error: ServiceError | null, response: IsStreamEmptyResponse) => void
    ): ClientUnaryCall;
    isStreamEmpty(
        request: IsStreamEmptyRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: IsStreamEmptyResponse) => void
    ): ClientUnaryCall;
    isStreamEmpty(
        request: IsStreamEmptyRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: IsStreamEmptyResponse) => void
    ): ClientUnaryCall;
    paginateStream(
        request: PaginateStreamRequest,
        callback: (error: ServiceError | null, response: PaginateStreamResponse) => void
    ): ClientUnaryCall;
    paginateStream(
        request: PaginateStreamRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: PaginateStreamResponse) => void
    ): ClientUnaryCall;
    paginateStream(
        request: PaginateStreamRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: PaginateStreamResponse) => void
    ): ClientUnaryCall;
    paginateStreamAfterEventId(
        request: PaginateStreamAfterEventIdRequest,
        callback: (error: ServiceError | null, response: PaginateStreamAfterEventIdResponse) => void
    ): ClientUnaryCall;
    paginateStreamAfterEventId(
        request: PaginateStreamAfterEventIdRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: PaginateStreamAfterEventIdResponse) => void
    ): ClientUnaryCall;
    paginateStreamAfterEventId(
        request: PaginateStreamAfterEventIdRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: PaginateStreamAfterEventIdResponse) => void
    ): ClientUnaryCall;
    paginateEvents(
        request: PaginateEventsRequest,
        callback: (error: ServiceError | null, response: PaginateEventsResponse) => void
    ): ClientUnaryCall;
    paginateEvents(
        request: PaginateEventsRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: PaginateEventsResponse) => void
    ): ClientUnaryCall;
    paginateEvents(
        request: PaginateEventsRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: PaginateEventsResponse) => void
    ): ClientUnaryCall;
    paginateEventsAfterEventId(
        request: PaginateEventsAfterEventIdRequest,
        callback: (error: ServiceError | null, response: PaginateEventsAfterEventIdResponse) => void
    ): ClientUnaryCall;
    paginateEventsAfterEventId(
        request: PaginateEventsAfterEventIdRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: PaginateEventsAfterEventIdResponse) => void
    ): ClientUnaryCall;
    paginateEventsAfterEventId(
        request: PaginateEventsAfterEventIdRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: PaginateEventsAfterEventIdResponse) => void
    ): ClientUnaryCall;
    introduceGdprOnEventField(
        request: IntroduceGdprOnEventFieldRequest,
        callback: (error: ServiceError | null, response: IntroduceGdprOnEventFieldResponse) => void
    ): ClientUnaryCall;
    introduceGdprOnEventField(
        request: IntroduceGdprOnEventFieldRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: IntroduceGdprOnEventFieldResponse) => void
    ): ClientUnaryCall;
    introduceGdprOnEventField(
        request: IntroduceGdprOnEventFieldRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: IntroduceGdprOnEventFieldResponse) => void
    ): ClientUnaryCall;
    invalidateGdpr(
        request: InvalidateGdprRequest,
        callback: (error: ServiceError | null, response: InvalidateGdprResponse) => void
    ): ClientUnaryCall;
    invalidateGdpr(
        request: InvalidateGdprRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: InvalidateGdprResponse) => void
    ): ClientUnaryCall;
    invalidateGdpr(
        request: InvalidateGdprRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: InvalidateGdprResponse) => void
    ): ClientUnaryCall;
    backchannelEvent(
        request: BackchannelEventRequest,
        callback: (error: ServiceError | null, response: BackchannelEventResponse) => void
    ): ClientUnaryCall;
    backchannelEvent(
        request: BackchannelEventRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: BackchannelEventResponse) => void
    ): ClientUnaryCall;
    backchannelEvent(
        request: BackchannelEventRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: BackchannelEventResponse) => void
    ): ClientUnaryCall;
    createStreamSnapshot(
        request: CreateStreamSnapshotRequest,
        callback: (error: ServiceError | null, response: CreateStreamSnapshotResponse) => void
    ): ClientUnaryCall;
    createStreamSnapshot(
        request: CreateStreamSnapshotRequest,
        metadata: Metadata,
        callback: (error: ServiceError | null, response: CreateStreamSnapshotResponse) => void
    ): ClientUnaryCall;
    createStreamSnapshot(
        request: CreateStreamSnapshotRequest,
        metadata: Metadata,
        options: Partial<CallOptions>,
        callback: (error: ServiceError | null, response: CreateStreamSnapshotResponse) => void
    ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(
    ServiceService,
    "freym.streams.management.Service"
) as unknown as {
    new (
        address: string,
        credentials: ChannelCredentials,
        options?: Partial<ClientOptions>
    ): ServiceClient;
    service: typeof ServiceService;
    serviceName: string;
};
