// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: streams/management/rename.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface RenameEventTypeRequest {
    topic: string;
    oldType: string;
    newType: string;
}

export interface RenameEventTypeResponse {}

function createBaseRenameEventTypeRequest(): RenameEventTypeRequest {
    return { topic: "", oldType: "", newType: "" };
}

export const RenameEventTypeRequest: MessageFns<RenameEventTypeRequest> = {
    encode(
        message: RenameEventTypeRequest,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        if (message.oldType !== "") {
            writer.uint32(18).string(message.oldType);
        }
        if (message.newType !== "") {
            writer.uint32(26).string(message.newType);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RenameEventTypeRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenameEventTypeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.oldType = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.newType = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): RenameEventTypeRequest {
        return {
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            oldType: isSet(object.oldType) ? globalThis.String(object.oldType) : "",
            newType: isSet(object.newType) ? globalThis.String(object.newType) : "",
        };
    },

    toJSON(message: RenameEventTypeRequest): unknown {
        const obj: any = {};
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.oldType !== "") {
            obj.oldType = message.oldType;
        }
        if (message.newType !== "") {
            obj.newType = message.newType;
        }
        return obj;
    },

    create(base?: DeepPartial<RenameEventTypeRequest>): RenameEventTypeRequest {
        return RenameEventTypeRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<RenameEventTypeRequest>): RenameEventTypeRequest {
        const message = createBaseRenameEventTypeRequest();
        message.topic = object.topic ?? "";
        message.oldType = object.oldType ?? "";
        message.newType = object.newType ?? "";
        return message;
    },
};

function createBaseRenameEventTypeResponse(): RenameEventTypeResponse {
    return {};
}

export const RenameEventTypeResponse: MessageFns<RenameEventTypeResponse> = {
    encode(_: RenameEventTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): RenameEventTypeResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRenameEventTypeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): RenameEventTypeResponse {
        return {};
    },

    toJSON(_: RenameEventTypeResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<RenameEventTypeResponse>): RenameEventTypeResponse {
        return RenameEventTypeResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<RenameEventTypeResponse>): RenameEventTypeResponse {
        const message = createBaseRenameEventTypeResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
