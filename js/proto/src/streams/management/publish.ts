// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: streams/management/publish.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EventMetadata, EventOptions } from "./event";

export interface PublishRequest {
    topic: string;
    events: PublishEvent[];
}

export interface PublishEvent {
    id: string;
    tenantId: string;
    type: string;
    stream: string;
    reason: string;
    options: EventOptions | undefined;
    metadata: EventMetadata | undefined;
    payload: { [key: string]: PublishEventPayload };
}

export interface PublishEvent_PayloadEntry {
    key: string;
    value: PublishEventPayload | undefined;
}

export interface PublishResponse {}

export interface PublishEventPayload {
    value: string;
    gdpr: PublishEventGdprValue | undefined;
}

export interface PublishEventGdprValue {
    id: string;
    default: string;
}

function createBasePublishRequest(): PublishRequest {
    return { topic: "", events: [] };
}

export const PublishRequest: MessageFns<PublishRequest> = {
    encode(message: PublishRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.topic !== "") {
            writer.uint32(10).string(message.topic);
        }
        for (const v of message.events) {
            PublishEvent.encode(v!, writer.uint32(18).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.events.push(PublishEvent.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): PublishRequest {
        return {
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            events: globalThis.Array.isArray(object?.events)
                ? object.events.map((e: any) => PublishEvent.fromJSON(e))
                : [],
        };
    },

    toJSON(message: PublishRequest): unknown {
        const obj: any = {};
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.events?.length) {
            obj.events = message.events.map(e => PublishEvent.toJSON(e));
        }
        return obj;
    },

    create(base?: DeepPartial<PublishRequest>): PublishRequest {
        return PublishRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<PublishRequest>): PublishRequest {
        const message = createBasePublishRequest();
        message.topic = object.topic ?? "";
        message.events = object.events?.map(e => PublishEvent.fromPartial(e)) || [];
        return message;
    },
};

function createBasePublishEvent(): PublishEvent {
    return {
        id: "",
        tenantId: "",
        type: "",
        stream: "",
        reason: "",
        options: undefined,
        metadata: undefined,
        payload: {},
    };
}

export const PublishEvent: MessageFns<PublishEvent> = {
    encode(message: PublishEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.tenantId !== "") {
            writer.uint32(18).string(message.tenantId);
        }
        if (message.type !== "") {
            writer.uint32(26).string(message.type);
        }
        if (message.stream !== "") {
            writer.uint32(34).string(message.stream);
        }
        if (message.reason !== "") {
            writer.uint32(42).string(message.reason);
        }
        if (message.options !== undefined) {
            EventOptions.encode(message.options, writer.uint32(50).fork()).join();
        }
        if (message.metadata !== undefined) {
            EventMetadata.encode(message.metadata, writer.uint32(58).fork()).join();
        }
        Object.entries(message.payload).forEach(([key, value]) => {
            PublishEvent_PayloadEntry.encode(
                { key: key as any, value },
                writer.uint32(66).fork()
            ).join();
        });
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishEvent {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.type = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }

                    message.stream = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }

                    message.reason = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }

                    message.options = EventOptions.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }

                    message.metadata = EventMetadata.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }

                    const entry8 = PublishEvent_PayloadEntry.decode(reader, reader.uint32());
                    if (entry8.value !== undefined) {
                        message.payload[entry8.key] = entry8.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): PublishEvent {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            type: isSet(object.type) ? globalThis.String(object.type) : "",
            stream: isSet(object.stream) ? globalThis.String(object.stream) : "",
            reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
            options: isSet(object.options) ? EventOptions.fromJSON(object.options) : undefined,
            metadata: isSet(object.metadata) ? EventMetadata.fromJSON(object.metadata) : undefined,
            payload: isObject(object.payload)
                ? Object.entries(object.payload).reduce<{ [key: string]: PublishEventPayload }>(
                      (acc, [key, value]) => {
                          acc[key] = PublishEventPayload.fromJSON(value);
                          return acc;
                      },
                      {}
                  )
                : {},
        };
    },

    toJSON(message: PublishEvent): unknown {
        const obj: any = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.type !== "") {
            obj.type = message.type;
        }
        if (message.stream !== "") {
            obj.stream = message.stream;
        }
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        if (message.options !== undefined) {
            obj.options = EventOptions.toJSON(message.options);
        }
        if (message.metadata !== undefined) {
            obj.metadata = EventMetadata.toJSON(message.metadata);
        }
        if (message.payload) {
            const entries = Object.entries(message.payload);
            if (entries.length > 0) {
                obj.payload = {};
                entries.forEach(([k, v]) => {
                    obj.payload[k] = PublishEventPayload.toJSON(v);
                });
            }
        }
        return obj;
    },

    create(base?: DeepPartial<PublishEvent>): PublishEvent {
        return PublishEvent.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<PublishEvent>): PublishEvent {
        const message = createBasePublishEvent();
        message.id = object.id ?? "";
        message.tenantId = object.tenantId ?? "";
        message.type = object.type ?? "";
        message.stream = object.stream ?? "";
        message.reason = object.reason ?? "";
        message.options =
            object.options !== undefined && object.options !== null
                ? EventOptions.fromPartial(object.options)
                : undefined;
        message.metadata =
            object.metadata !== undefined && object.metadata !== null
                ? EventMetadata.fromPartial(object.metadata)
                : undefined;
        message.payload = Object.entries(object.payload ?? {}).reduce<{
            [key: string]: PublishEventPayload;
        }>((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = PublishEventPayload.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};

function createBasePublishEvent_PayloadEntry(): PublishEvent_PayloadEntry {
    return { key: "", value: undefined };
}

export const PublishEvent_PayloadEntry: MessageFns<PublishEvent_PayloadEntry> = {
    encode(
        message: PublishEvent_PayloadEntry,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            PublishEventPayload.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishEvent_PayloadEntry {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishEvent_PayloadEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.value = PublishEventPayload.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): PublishEvent_PayloadEntry {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? PublishEventPayload.fromJSON(object.value) : undefined,
        };
    },

    toJSON(message: PublishEvent_PayloadEntry): unknown {
        const obj: any = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = PublishEventPayload.toJSON(message.value);
        }
        return obj;
    },

    create(base?: DeepPartial<PublishEvent_PayloadEntry>): PublishEvent_PayloadEntry {
        return PublishEvent_PayloadEntry.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<PublishEvent_PayloadEntry>): PublishEvent_PayloadEntry {
        const message = createBasePublishEvent_PayloadEntry();
        message.key = object.key ?? "";
        message.value =
            object.value !== undefined && object.value !== null
                ? PublishEventPayload.fromPartial(object.value)
                : undefined;
        return message;
    },
};

function createBasePublishResponse(): PublishResponse {
    return {};
}

export const PublishResponse: MessageFns<PublishResponse> = {
    encode(_: PublishResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): PublishResponse {
        return {};
    },

    toJSON(_: PublishResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<PublishResponse>): PublishResponse {
        return PublishResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<PublishResponse>): PublishResponse {
        const message = createBasePublishResponse();
        return message;
    },
};

function createBasePublishEventPayload(): PublishEventPayload {
    return { value: "", gdpr: undefined };
}

export const PublishEventPayload: MessageFns<PublishEventPayload> = {
    encode(message: PublishEventPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        if (message.gdpr !== undefined) {
            PublishEventGdprValue.encode(message.gdpr, writer.uint32(18).fork()).join();
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishEventPayload {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishEventPayload();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.value = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.gdpr = PublishEventGdprValue.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): PublishEventPayload {
        return {
            value: isSet(object.value) ? globalThis.String(object.value) : "",
            gdpr: isSet(object.gdpr) ? PublishEventGdprValue.fromJSON(object.gdpr) : undefined,
        };
    },

    toJSON(message: PublishEventPayload): unknown {
        const obj: any = {};
        if (message.value !== "") {
            obj.value = message.value;
        }
        if (message.gdpr !== undefined) {
            obj.gdpr = PublishEventGdprValue.toJSON(message.gdpr);
        }
        return obj;
    },

    create(base?: DeepPartial<PublishEventPayload>): PublishEventPayload {
        return PublishEventPayload.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<PublishEventPayload>): PublishEventPayload {
        const message = createBasePublishEventPayload();
        message.value = object.value ?? "";
        message.gdpr =
            object.gdpr !== undefined && object.gdpr !== null
                ? PublishEventGdprValue.fromPartial(object.gdpr)
                : undefined;
        return message;
    },
};

function createBasePublishEventGdprValue(): PublishEventGdprValue {
    return { id: "", default: "" };
}

export const PublishEventGdprValue: MessageFns<PublishEventGdprValue> = {
    encode(
        message: PublishEventGdprValue,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.default !== "") {
            writer.uint32(18).string(message.default);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): PublishEventGdprValue {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublishEventGdprValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.default = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): PublishEventGdprValue {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "",
            default: isSet(object.default) ? globalThis.String(object.default) : "",
        };
    },

    toJSON(message: PublishEventGdprValue): unknown {
        const obj: any = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        if (message.default !== "") {
            obj.default = message.default;
        }
        return obj;
    },

    create(base?: DeepPartial<PublishEventGdprValue>): PublishEventGdprValue {
        return PublishEventGdprValue.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<PublishEventGdprValue>): PublishEventGdprValue {
        const message = createBasePublishEventGdprValue();
        message.id = object.id ?? "";
        message.default = object.default ?? "";
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isObject(value: any): boolean {
    return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
