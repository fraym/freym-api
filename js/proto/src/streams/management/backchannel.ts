// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: streams/management/backchannel.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Event } from "./event";

export interface BackchannelRequest {
    payload?:
        | { $case: "broadcast"; broadcast: Event }
        | { $case: "notice"; notice: BackchannelNotice }
        | {
              $case: "handled";
              handled: BackchannelTransactionDoneNotice;
          }
        | undefined;
}

export interface BackchannelNotice {
    tenantId: string;
    topic: string;
}

export interface BackchannelTransactionDoneNotice {
    tenantId: string;
    topic: string;
    correlationId: string;
}

export interface BackchannelResponse {}

function createBaseBackchannelRequest(): BackchannelRequest {
    return { payload: undefined };
}

export const BackchannelRequest: MessageFns<BackchannelRequest> = {
    encode(message: BackchannelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        switch (message.payload?.$case) {
            case "broadcast":
                Event.encode(message.payload.broadcast, writer.uint32(10).fork()).join();
                break;
            case "notice":
                BackchannelNotice.encode(message.payload.notice, writer.uint32(18).fork()).join();
                break;
            case "handled":
                BackchannelTransactionDoneNotice.encode(
                    message.payload.handled,
                    writer.uint32(26).fork()
                ).join();
                break;
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelRequest {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.payload = {
                        $case: "broadcast",
                        broadcast: Event.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.payload = {
                        $case: "notice",
                        notice: BackchannelNotice.decode(reader, reader.uint32()),
                    };
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.payload = {
                        $case: "handled",
                        handled: BackchannelTransactionDoneNotice.decode(reader, reader.uint32()),
                    };
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): BackchannelRequest {
        return {
            payload: isSet(object.broadcast)
                ? { $case: "broadcast", broadcast: Event.fromJSON(object.broadcast) }
                : isSet(object.notice)
                  ? { $case: "notice", notice: BackchannelNotice.fromJSON(object.notice) }
                  : isSet(object.handled)
                    ? {
                          $case: "handled",
                          handled: BackchannelTransactionDoneNotice.fromJSON(object.handled),
                      }
                    : undefined,
        };
    },

    toJSON(message: BackchannelRequest): unknown {
        const obj: any = {};
        if (message.payload?.$case === "broadcast") {
            obj.broadcast = Event.toJSON(message.payload.broadcast);
        } else if (message.payload?.$case === "notice") {
            obj.notice = BackchannelNotice.toJSON(message.payload.notice);
        } else if (message.payload?.$case === "handled") {
            obj.handled = BackchannelTransactionDoneNotice.toJSON(message.payload.handled);
        }
        return obj;
    },

    create(base?: DeepPartial<BackchannelRequest>): BackchannelRequest {
        return BackchannelRequest.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<BackchannelRequest>): BackchannelRequest {
        const message = createBaseBackchannelRequest();
        switch (object.payload?.$case) {
            case "broadcast": {
                if (object.payload?.broadcast !== undefined && object.payload?.broadcast !== null) {
                    message.payload = {
                        $case: "broadcast",
                        broadcast: Event.fromPartial(object.payload.broadcast),
                    };
                }
                break;
            }
            case "notice": {
                if (object.payload?.notice !== undefined && object.payload?.notice !== null) {
                    message.payload = {
                        $case: "notice",
                        notice: BackchannelNotice.fromPartial(object.payload.notice),
                    };
                }
                break;
            }
            case "handled": {
                if (object.payload?.handled !== undefined && object.payload?.handled !== null) {
                    message.payload = {
                        $case: "handled",
                        handled: BackchannelTransactionDoneNotice.fromPartial(
                            object.payload.handled
                        ),
                    };
                }
                break;
            }
        }
        return message;
    },
};

function createBaseBackchannelNotice(): BackchannelNotice {
    return { tenantId: "", topic: "" };
}

export const BackchannelNotice: MessageFns<BackchannelNotice> = {
    encode(message: BackchannelNotice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelNotice {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelNotice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): BackchannelNotice {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
        };
    },

    toJSON(message: BackchannelNotice): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        return obj;
    },

    create(base?: DeepPartial<BackchannelNotice>): BackchannelNotice {
        return BackchannelNotice.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<BackchannelNotice>): BackchannelNotice {
        const message = createBaseBackchannelNotice();
        message.tenantId = object.tenantId ?? "";
        message.topic = object.topic ?? "";
        return message;
    },
};

function createBaseBackchannelTransactionDoneNotice(): BackchannelTransactionDoneNotice {
    return { tenantId: "", topic: "", correlationId: "" };
}

export const BackchannelTransactionDoneNotice: MessageFns<BackchannelTransactionDoneNotice> = {
    encode(
        message: BackchannelTransactionDoneNotice,
        writer: BinaryWriter = new BinaryWriter()
    ): BinaryWriter {
        if (message.tenantId !== "") {
            writer.uint32(10).string(message.tenantId);
        }
        if (message.topic !== "") {
            writer.uint32(18).string(message.topic);
        }
        if (message.correlationId !== "") {
            writer.uint32(26).string(message.correlationId);
        }
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelTransactionDoneNotice {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelTransactionDoneNotice();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }

                    message.tenantId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }

                    message.topic = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }

                    message.correlationId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(object: any): BackchannelTransactionDoneNotice {
        return {
            tenantId: isSet(object.tenantId) ? globalThis.String(object.tenantId) : "",
            topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
            correlationId: isSet(object.correlationId)
                ? globalThis.String(object.correlationId)
                : "",
        };
    },

    toJSON(message: BackchannelTransactionDoneNotice): unknown {
        const obj: any = {};
        if (message.tenantId !== "") {
            obj.tenantId = message.tenantId;
        }
        if (message.topic !== "") {
            obj.topic = message.topic;
        }
        if (message.correlationId !== "") {
            obj.correlationId = message.correlationId;
        }
        return obj;
    },

    create(base?: DeepPartial<BackchannelTransactionDoneNotice>): BackchannelTransactionDoneNotice {
        return BackchannelTransactionDoneNotice.fromPartial(base ?? {});
    },
    fromPartial(
        object: DeepPartial<BackchannelTransactionDoneNotice>
    ): BackchannelTransactionDoneNotice {
        const message = createBaseBackchannelTransactionDoneNotice();
        message.tenantId = object.tenantId ?? "";
        message.topic = object.topic ?? "";
        message.correlationId = object.correlationId ?? "";
        return message;
    },
};

function createBaseBackchannelResponse(): BackchannelResponse {
    return {};
}

export const BackchannelResponse: MessageFns<BackchannelResponse> = {
    encode(_: BackchannelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
        return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): BackchannelResponse {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBackchannelResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },

    fromJSON(_: any): BackchannelResponse {
        return {};
    },

    toJSON(_: BackchannelResponse): unknown {
        const obj: any = {};
        return obj;
    },

    create(base?: DeepPartial<BackchannelResponse>): BackchannelResponse {
        return BackchannelResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<BackchannelResponse>): BackchannelResponse {
        const message = createBaseBackchannelResponse();
        return message;
    },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin
    ? T
    : T extends globalThis.Array<infer U>
      ? globalThis.Array<DeepPartial<U>>
      : T extends ReadonlyArray<infer U>
        ? ReadonlyArray<DeepPartial<U>>
        : T extends { $case: string }
          ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
          : T extends {}
            ? { [K in keyof T]?: DeepPartial<T[K]> }
            : Partial<T>;

function isSet(value: any): boolean {
    return value !== null && value !== undefined;
}

interface MessageFns<T> {
    encode(message: T, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): T;
    fromJSON(object: any): T;
    toJSON(message: T): unknown;
    create(base?: DeepPartial<T>): T;
    fromPartial(object: DeepPartial<T>): T;
}
