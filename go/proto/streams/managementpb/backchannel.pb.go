// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: streams/management/backchannel.proto

package managementpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackchannelRequest struct {
	state              protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_Payload isBackchannelRequest_Payload `protobuf_oneof:"payload"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BackchannelRequest) Reset() {
	*x = BackchannelRequest{}
	mi := &file_streams_management_backchannel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackchannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackchannelRequest) ProtoMessage() {}

func (x *BackchannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_backchannel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BackchannelRequest) GetBroadcast() *Event {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*backchannelRequest_Broadcast); ok {
			return x.Broadcast
		}
	}
	return nil
}

func (x *BackchannelRequest) GetNotice() *BackchannelNotice {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*backchannelRequest_Notice); ok {
			return x.Notice
		}
	}
	return nil
}

func (x *BackchannelRequest) GetHandled() *BackchannelTransactionDoneNotice {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*backchannelRequest_Handled); ok {
			return x.Handled
		}
	}
	return nil
}

func (x *BackchannelRequest) SetBroadcast(v *Event) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &backchannelRequest_Broadcast{v}
}

func (x *BackchannelRequest) SetNotice(v *BackchannelNotice) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &backchannelRequest_Notice{v}
}

func (x *BackchannelRequest) SetHandled(v *BackchannelTransactionDoneNotice) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &backchannelRequest_Handled{v}
}

func (x *BackchannelRequest) HasPayload() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Payload != nil
}

func (x *BackchannelRequest) HasBroadcast() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*backchannelRequest_Broadcast)
	return ok
}

func (x *BackchannelRequest) HasNotice() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*backchannelRequest_Notice)
	return ok
}

func (x *BackchannelRequest) HasHandled() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*backchannelRequest_Handled)
	return ok
}

func (x *BackchannelRequest) ClearPayload() {
	x.xxx_hidden_Payload = nil
}

func (x *BackchannelRequest) ClearBroadcast() {
	if _, ok := x.xxx_hidden_Payload.(*backchannelRequest_Broadcast); ok {
		x.xxx_hidden_Payload = nil
	}
}

func (x *BackchannelRequest) ClearNotice() {
	if _, ok := x.xxx_hidden_Payload.(*backchannelRequest_Notice); ok {
		x.xxx_hidden_Payload = nil
	}
}

func (x *BackchannelRequest) ClearHandled() {
	if _, ok := x.xxx_hidden_Payload.(*backchannelRequest_Handled); ok {
		x.xxx_hidden_Payload = nil
	}
}

const BackchannelRequest_Payload_not_set_case case_BackchannelRequest_Payload = 0
const BackchannelRequest_Broadcast_case case_BackchannelRequest_Payload = 1
const BackchannelRequest_Notice_case case_BackchannelRequest_Payload = 2
const BackchannelRequest_Handled_case case_BackchannelRequest_Payload = 3

func (x *BackchannelRequest) WhichPayload() case_BackchannelRequest_Payload {
	if x == nil {
		return BackchannelRequest_Payload_not_set_case
	}
	switch x.xxx_hidden_Payload.(type) {
	case *backchannelRequest_Broadcast:
		return BackchannelRequest_Broadcast_case
	case *backchannelRequest_Notice:
		return BackchannelRequest_Notice_case
	case *backchannelRequest_Handled:
		return BackchannelRequest_Handled_case
	default:
		return BackchannelRequest_Payload_not_set_case
	}
}

type BackchannelRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Payload:
	Broadcast *Event
	Notice    *BackchannelNotice
	Handled   *BackchannelTransactionDoneNotice
	// -- end of xxx_hidden_Payload
}

func (b0 BackchannelRequest_builder) Build() *BackchannelRequest {
	m0 := &BackchannelRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Broadcast != nil {
		x.xxx_hidden_Payload = &backchannelRequest_Broadcast{b.Broadcast}
	}
	if b.Notice != nil {
		x.xxx_hidden_Payload = &backchannelRequest_Notice{b.Notice}
	}
	if b.Handled != nil {
		x.xxx_hidden_Payload = &backchannelRequest_Handled{b.Handled}
	}
	return m0
}

type case_BackchannelRequest_Payload protoreflect.FieldNumber

func (x case_BackchannelRequest_Payload) String() string {
	md := file_streams_management_backchannel_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isBackchannelRequest_Payload interface {
	isBackchannelRequest_Payload()
}

type backchannelRequest_Broadcast struct {
	Broadcast *Event `protobuf:"bytes,1,opt,name=broadcast,proto3,oneof"`
}

type backchannelRequest_Notice struct {
	Notice *BackchannelNotice `protobuf:"bytes,2,opt,name=notice,proto3,oneof"`
}

type backchannelRequest_Handled struct {
	Handled *BackchannelTransactionDoneNotice `protobuf:"bytes,3,opt,name=handled,proto3,oneof"`
}

func (*backchannelRequest_Broadcast) isBackchannelRequest_Payload() {}

func (*backchannelRequest_Notice) isBackchannelRequest_Payload() {}

func (*backchannelRequest_Handled) isBackchannelRequest_Payload() {}

type BackchannelNotice struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TenantId string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3"`
	xxx_hidden_Topic    string                 `protobuf:"bytes,2,opt,name=topic,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BackchannelNotice) Reset() {
	*x = BackchannelNotice{}
	mi := &file_streams_management_backchannel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackchannelNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackchannelNotice) ProtoMessage() {}

func (x *BackchannelNotice) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_backchannel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BackchannelNotice) GetTenantId() string {
	if x != nil {
		return x.xxx_hidden_TenantId
	}
	return ""
}

func (x *BackchannelNotice) GetTopic() string {
	if x != nil {
		return x.xxx_hidden_Topic
	}
	return ""
}

func (x *BackchannelNotice) SetTenantId(v string) {
	x.xxx_hidden_TenantId = v
}

func (x *BackchannelNotice) SetTopic(v string) {
	x.xxx_hidden_Topic = v
}

type BackchannelNotice_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TenantId string
	Topic    string
}

func (b0 BackchannelNotice_builder) Build() *BackchannelNotice {
	m0 := &BackchannelNotice{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TenantId = b.TenantId
	x.xxx_hidden_Topic = b.Topic
	return m0
}

type BackchannelTransactionDoneNotice struct {
	state                    protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TenantId      string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3"`
	xxx_hidden_Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3"`
	xxx_hidden_CorrelationId string                 `protobuf:"bytes,3,opt,name=correlation_id,json=correlationId,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BackchannelTransactionDoneNotice) Reset() {
	*x = BackchannelTransactionDoneNotice{}
	mi := &file_streams_management_backchannel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackchannelTransactionDoneNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackchannelTransactionDoneNotice) ProtoMessage() {}

func (x *BackchannelTransactionDoneNotice) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_backchannel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *BackchannelTransactionDoneNotice) GetTenantId() string {
	if x != nil {
		return x.xxx_hidden_TenantId
	}
	return ""
}

func (x *BackchannelTransactionDoneNotice) GetTopic() string {
	if x != nil {
		return x.xxx_hidden_Topic
	}
	return ""
}

func (x *BackchannelTransactionDoneNotice) GetCorrelationId() string {
	if x != nil {
		return x.xxx_hidden_CorrelationId
	}
	return ""
}

func (x *BackchannelTransactionDoneNotice) SetTenantId(v string) {
	x.xxx_hidden_TenantId = v
}

func (x *BackchannelTransactionDoneNotice) SetTopic(v string) {
	x.xxx_hidden_Topic = v
}

func (x *BackchannelTransactionDoneNotice) SetCorrelationId(v string) {
	x.xxx_hidden_CorrelationId = v
}

type BackchannelTransactionDoneNotice_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TenantId      string
	Topic         string
	CorrelationId string
}

func (b0 BackchannelTransactionDoneNotice_builder) Build() *BackchannelTransactionDoneNotice {
	m0 := &BackchannelTransactionDoneNotice{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TenantId = b.TenantId
	x.xxx_hidden_Topic = b.Topic
	x.xxx_hidden_CorrelationId = b.CorrelationId
	return m0
}

type BackchannelResponse struct {
	state         protoimpl.MessageState `protogen:"opaque.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackchannelResponse) Reset() {
	*x = BackchannelResponse{}
	mi := &file_streams_management_backchannel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackchannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackchannelResponse) ProtoMessage() {}

func (x *BackchannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_backchannel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

type BackchannelResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

}

func (b0 BackchannelResponse_builder) Build() *BackchannelResponse {
	m0 := &BackchannelResponse{}
	b, x := &b0, m0
	_, _ = b, x
	return m0
}

var File_streams_management_backchannel_proto protoreflect.FileDescriptor

const file_streams_management_backchannel_proto_rawDesc = "" +
	"\n" +
	"$streams/management/backchannel.proto\x12\x18freym.streams.management\x1a\x1estreams/management/event.proto\"\xff\x01\n" +
	"\x12BackchannelRequest\x12?\n" +
	"\tbroadcast\x18\x01 \x01(\v2\x1f.freym.streams.management.EventH\x00R\tbroadcast\x12E\n" +
	"\x06notice\x18\x02 \x01(\v2+.freym.streams.management.BackchannelNoticeH\x00R\x06notice\x12V\n" +
	"\ahandled\x18\x03 \x01(\v2:.freym.streams.management.BackchannelTransactionDoneNoticeH\x00R\ahandledB\t\n" +
	"\apayload\"F\n" +
	"\x11BackchannelNotice\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\"|\n" +
	" BackchannelTransactionDoneNotice\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12%\n" +
	"\x0ecorrelation_id\x18\x03 \x01(\tR\rcorrelationId\"\x15\n" +
	"\x13BackchannelResponseb\x06proto3"

var file_streams_management_backchannel_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_streams_management_backchannel_proto_goTypes = []any{
	(*BackchannelRequest)(nil),               // 0: freym.streams.management.BackchannelRequest
	(*BackchannelNotice)(nil),                // 1: freym.streams.management.BackchannelNotice
	(*BackchannelTransactionDoneNotice)(nil), // 2: freym.streams.management.BackchannelTransactionDoneNotice
	(*BackchannelResponse)(nil),              // 3: freym.streams.management.BackchannelResponse
	(*Event)(nil),                            // 4: freym.streams.management.Event
}
var file_streams_management_backchannel_proto_depIdxs = []int32{
	4, // 0: freym.streams.management.BackchannelRequest.broadcast:type_name -> freym.streams.management.Event
	1, // 1: freym.streams.management.BackchannelRequest.notice:type_name -> freym.streams.management.BackchannelNotice
	2, // 2: freym.streams.management.BackchannelRequest.handled:type_name -> freym.streams.management.BackchannelTransactionDoneNotice
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_streams_management_backchannel_proto_init() }
func file_streams_management_backchannel_proto_init() {
	if File_streams_management_backchannel_proto != nil {
		return
	}
	file_streams_management_event_proto_init()
	file_streams_management_backchannel_proto_msgTypes[0].OneofWrappers = []any{
		(*backchannelRequest_Broadcast)(nil),
		(*backchannelRequest_Notice)(nil),
		(*backchannelRequest_Handled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_streams_management_backchannel_proto_rawDesc), len(file_streams_management_backchannel_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_streams_management_backchannel_proto_goTypes,
		DependencyIndexes: file_streams_management_backchannel_proto_depIdxs,
		MessageInfos:      file_streams_management_backchannel_proto_msgTypes,
	}.Build()
	File_streams_management_backchannel_proto = out.File
	file_streams_management_backchannel_proto_goTypes = nil
	file_streams_management_backchannel_proto_depIdxs = nil
}
