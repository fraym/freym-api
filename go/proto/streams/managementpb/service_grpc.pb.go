// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: streams/management/service.proto

package managementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_Publish_FullMethodName                         = "/freym.streams.management.Service/Publish"
	Service_Subscribe_FullMethodName                       = "/freym.streams.management.Service/Subscribe"
	Service_GetEvent_FullMethodName                        = "/freym.streams.management.Service/GetEvent"
	Service_GetLastEvent_FullMethodName                    = "/freym.streams.management.Service/GetLastEvent"
	Service_GetLastHandledEvent_FullMethodName             = "/freym.streams.management.Service/GetLastHandledEvent"
	Service_GetLastEventByTypes_FullMethodName             = "/freym.streams.management.Service/GetLastEventByTypes"
	Service_PaginateEvents_FullMethodName                  = "/freym.streams.management.Service/PaginateEvents"
	Service_PaginateEventsAfterEventId_FullMethodName      = "/freym.streams.management.Service/PaginateEventsAfterEventId"
	Service_IsStreamEmpty_FullMethodName                   = "/freym.streams.management.Service/IsStreamEmpty"
	Service_PaginateStream_FullMethodName                  = "/freym.streams.management.Service/PaginateStream"
	Service_PaginateStreamAfterEventId_FullMethodName      = "/freym.streams.management.Service/PaginateStreamAfterEventId"
	Service_IntroduceGdprOnEventField_FullMethodName       = "/freym.streams.management.Service/IntroduceGdprOnEventField"
	Service_InvalidateGdpr_FullMethodName                  = "/freym.streams.management.Service/InvalidateGdpr"
	Service_CreateStreamSnapshot_FullMethodName            = "/freym.streams.management.Service/CreateStreamSnapshot"
	Service_RenameEventType_FullMethodName                 = "/freym.streams.management.Service/RenameEventType"
	Service_WaitForTransactionalConsistency_FullMethodName = "/freym.streams.management.Service/WaitForTransactionalConsistency"
	Service_Backchannel_FullMethodName                     = "/freym.streams.management.Service/Backchannel"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse], error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error)
	GetLastEvent(ctx context.Context, in *GetLastEventRequest, opts ...grpc.CallOption) (*Event, error)
	GetLastHandledEvent(ctx context.Context, in *GetLastHandledEventRequest, opts ...grpc.CallOption) (*Event, error)
	GetLastEventByTypes(ctx context.Context, in *GetLastEventByTypesRequest, opts ...grpc.CallOption) (*Event, error)
	PaginateEvents(ctx context.Context, in *PaginateEventsRequest, opts ...grpc.CallOption) (*PaginateEventsResponse, error)
	PaginateEventsAfterEventId(ctx context.Context, in *PaginateEventsAfterEventIdRequest, opts ...grpc.CallOption) (*PaginateEventsAfterEventIdResponse, error)
	IsStreamEmpty(ctx context.Context, in *IsStreamEmptyRequest, opts ...grpc.CallOption) (*IsStreamEmptyResponse, error)
	PaginateStream(ctx context.Context, in *PaginateStreamRequest, opts ...grpc.CallOption) (*PaginateStreamResponse, error)
	PaginateStreamAfterEventId(ctx context.Context, in *PaginateStreamAfterEventIdRequest, opts ...grpc.CallOption) (*PaginateStreamAfterEventIdResponse, error)
	IntroduceGdprOnEventField(ctx context.Context, in *IntroduceGdprOnEventFieldRequest, opts ...grpc.CallOption) (*IntroduceGdprOnEventFieldResponse, error)
	InvalidateGdpr(ctx context.Context, in *InvalidateGdprRequest, opts ...grpc.CallOption) (*InvalidateGdprResponse, error)
	CreateStreamSnapshot(ctx context.Context, in *CreateStreamSnapshotRequest, opts ...grpc.CallOption) (*CreateStreamSnapshotResponse, error)
	RenameEventType(ctx context.Context, in *RenameEventTypeRequest, opts ...grpc.CallOption) (*RenameEventTypeResponse, error)
	WaitForTransactionalConsistency(ctx context.Context, in *WaitForTransactionalConsistencyRequest, opts ...grpc.CallOption) (*WaitForTransactionalConsistencyResponse, error)
	Backchannel(ctx context.Context, in *BackchannelRequest, opts ...grpc.CallOption) (*BackchannelResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, Service_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_SubscribeClient = grpc.BidiStreamingClient[SubscribeRequest, SubscribeResponse]

func (c *serviceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, Service_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetLastEvent(ctx context.Context, in *GetLastEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, Service_GetLastEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetLastHandledEvent(ctx context.Context, in *GetLastHandledEventRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, Service_GetLastHandledEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetLastEventByTypes(ctx context.Context, in *GetLastEventByTypesRequest, opts ...grpc.CallOption) (*Event, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Event)
	err := c.cc.Invoke(ctx, Service_GetLastEventByTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PaginateEvents(ctx context.Context, in *PaginateEventsRequest, opts ...grpc.CallOption) (*PaginateEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginateEventsResponse)
	err := c.cc.Invoke(ctx, Service_PaginateEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PaginateEventsAfterEventId(ctx context.Context, in *PaginateEventsAfterEventIdRequest, opts ...grpc.CallOption) (*PaginateEventsAfterEventIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginateEventsAfterEventIdResponse)
	err := c.cc.Invoke(ctx, Service_PaginateEventsAfterEventId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IsStreamEmpty(ctx context.Context, in *IsStreamEmptyRequest, opts ...grpc.CallOption) (*IsStreamEmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsStreamEmptyResponse)
	err := c.cc.Invoke(ctx, Service_IsStreamEmpty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PaginateStream(ctx context.Context, in *PaginateStreamRequest, opts ...grpc.CallOption) (*PaginateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginateStreamResponse)
	err := c.cc.Invoke(ctx, Service_PaginateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PaginateStreamAfterEventId(ctx context.Context, in *PaginateStreamAfterEventIdRequest, opts ...grpc.CallOption) (*PaginateStreamAfterEventIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaginateStreamAfterEventIdResponse)
	err := c.cc.Invoke(ctx, Service_PaginateStreamAfterEventId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IntroduceGdprOnEventField(ctx context.Context, in *IntroduceGdprOnEventFieldRequest, opts ...grpc.CallOption) (*IntroduceGdprOnEventFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntroduceGdprOnEventFieldResponse)
	err := c.cc.Invoke(ctx, Service_IntroduceGdprOnEventField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) InvalidateGdpr(ctx context.Context, in *InvalidateGdprRequest, opts ...grpc.CallOption) (*InvalidateGdprResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvalidateGdprResponse)
	err := c.cc.Invoke(ctx, Service_InvalidateGdpr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateStreamSnapshot(ctx context.Context, in *CreateStreamSnapshotRequest, opts ...grpc.CallOption) (*CreateStreamSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamSnapshotResponse)
	err := c.cc.Invoke(ctx, Service_CreateStreamSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RenameEventType(ctx context.Context, in *RenameEventTypeRequest, opts ...grpc.CallOption) (*RenameEventTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameEventTypeResponse)
	err := c.cc.Invoke(ctx, Service_RenameEventType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WaitForTransactionalConsistency(ctx context.Context, in *WaitForTransactionalConsistencyRequest, opts ...grpc.CallOption) (*WaitForTransactionalConsistencyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WaitForTransactionalConsistencyResponse)
	err := c.cc.Invoke(ctx, Service_WaitForTransactionalConsistency_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Backchannel(ctx context.Context, in *BackchannelRequest, opts ...grpc.CallOption) (*BackchannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BackchannelResponse)
	err := c.cc.Invoke(ctx, Service_Backchannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]) error
	GetEvent(context.Context, *GetEventRequest) (*Event, error)
	GetLastEvent(context.Context, *GetLastEventRequest) (*Event, error)
	GetLastHandledEvent(context.Context, *GetLastHandledEventRequest) (*Event, error)
	GetLastEventByTypes(context.Context, *GetLastEventByTypesRequest) (*Event, error)
	PaginateEvents(context.Context, *PaginateEventsRequest) (*PaginateEventsResponse, error)
	PaginateEventsAfterEventId(context.Context, *PaginateEventsAfterEventIdRequest) (*PaginateEventsAfterEventIdResponse, error)
	IsStreamEmpty(context.Context, *IsStreamEmptyRequest) (*IsStreamEmptyResponse, error)
	PaginateStream(context.Context, *PaginateStreamRequest) (*PaginateStreamResponse, error)
	PaginateStreamAfterEventId(context.Context, *PaginateStreamAfterEventIdRequest) (*PaginateStreamAfterEventIdResponse, error)
	IntroduceGdprOnEventField(context.Context, *IntroduceGdprOnEventFieldRequest) (*IntroduceGdprOnEventFieldResponse, error)
	InvalidateGdpr(context.Context, *InvalidateGdprRequest) (*InvalidateGdprResponse, error)
	CreateStreamSnapshot(context.Context, *CreateStreamSnapshotRequest) (*CreateStreamSnapshotResponse, error)
	RenameEventType(context.Context, *RenameEventTypeRequest) (*RenameEventTypeResponse, error)
	WaitForTransactionalConsistency(context.Context, *WaitForTransactionalConsistencyRequest) (*WaitForTransactionalConsistencyResponse, error)
	Backchannel(context.Context, *BackchannelRequest) (*BackchannelResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedServiceServer) Subscribe(grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedServiceServer) GetEvent(context.Context, *GetEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedServiceServer) GetLastEvent(context.Context, *GetLastEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastEvent not implemented")
}
func (UnimplementedServiceServer) GetLastHandledEvent(context.Context, *GetLastHandledEventRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastHandledEvent not implemented")
}
func (UnimplementedServiceServer) GetLastEventByTypes(context.Context, *GetLastEventByTypesRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastEventByTypes not implemented")
}
func (UnimplementedServiceServer) PaginateEvents(context.Context, *PaginateEventsRequest) (*PaginateEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateEvents not implemented")
}
func (UnimplementedServiceServer) PaginateEventsAfterEventId(context.Context, *PaginateEventsAfterEventIdRequest) (*PaginateEventsAfterEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateEventsAfterEventId not implemented")
}
func (UnimplementedServiceServer) IsStreamEmpty(context.Context, *IsStreamEmptyRequest) (*IsStreamEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStreamEmpty not implemented")
}
func (UnimplementedServiceServer) PaginateStream(context.Context, *PaginateStreamRequest) (*PaginateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateStream not implemented")
}
func (UnimplementedServiceServer) PaginateStreamAfterEventId(context.Context, *PaginateStreamAfterEventIdRequest) (*PaginateStreamAfterEventIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaginateStreamAfterEventId not implemented")
}
func (UnimplementedServiceServer) IntroduceGdprOnEventField(context.Context, *IntroduceGdprOnEventFieldRequest) (*IntroduceGdprOnEventFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntroduceGdprOnEventField not implemented")
}
func (UnimplementedServiceServer) InvalidateGdpr(context.Context, *InvalidateGdprRequest) (*InvalidateGdprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateGdpr not implemented")
}
func (UnimplementedServiceServer) CreateStreamSnapshot(context.Context, *CreateStreamSnapshotRequest) (*CreateStreamSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStreamSnapshot not implemented")
}
func (UnimplementedServiceServer) RenameEventType(context.Context, *RenameEventTypeRequest) (*RenameEventTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameEventType not implemented")
}
func (UnimplementedServiceServer) WaitForTransactionalConsistency(context.Context, *WaitForTransactionalConsistencyRequest) (*WaitForTransactionalConsistencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitForTransactionalConsistency not implemented")
}
func (UnimplementedServiceServer) Backchannel(context.Context, *BackchannelRequest) (*BackchannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backchannel not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Subscribe(&grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_SubscribeServer = grpc.BidiStreamingServer[SubscribeRequest, SubscribeResponse]

func _Service_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetLastEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetLastEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetLastEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetLastEvent(ctx, req.(*GetLastEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetLastHandledEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastHandledEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetLastHandledEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetLastHandledEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetLastHandledEvent(ctx, req.(*GetLastHandledEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetLastEventByTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastEventByTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetLastEventByTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetLastEventByTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetLastEventByTypes(ctx, req.(*GetLastEventByTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PaginateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PaginateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PaginateEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PaginateEvents(ctx, req.(*PaginateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PaginateEventsAfterEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateEventsAfterEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PaginateEventsAfterEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PaginateEventsAfterEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PaginateEventsAfterEventId(ctx, req.(*PaginateEventsAfterEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IsStreamEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsStreamEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IsStreamEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_IsStreamEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IsStreamEmpty(ctx, req.(*IsStreamEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PaginateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PaginateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PaginateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PaginateStream(ctx, req.(*PaginateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PaginateStreamAfterEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginateStreamAfterEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PaginateStreamAfterEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PaginateStreamAfterEventId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PaginateStreamAfterEventId(ctx, req.(*PaginateStreamAfterEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IntroduceGdprOnEventField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceGdprOnEventFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IntroduceGdprOnEventField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_IntroduceGdprOnEventField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IntroduceGdprOnEventField(ctx, req.(*IntroduceGdprOnEventFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_InvalidateGdpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateGdprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).InvalidateGdpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_InvalidateGdpr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).InvalidateGdpr(ctx, req.(*InvalidateGdprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateStreamSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateStreamSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreateStreamSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateStreamSnapshot(ctx, req.(*CreateStreamSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RenameEventType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameEventTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RenameEventType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RenameEventType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RenameEventType(ctx, req.(*RenameEventTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WaitForTransactionalConsistency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitForTransactionalConsistencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).WaitForTransactionalConsistency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_WaitForTransactionalConsistency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).WaitForTransactionalConsistency(ctx, req.(*WaitForTransactionalConsistencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Backchannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackchannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Backchannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Backchannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Backchannel(ctx, req.(*BackchannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freym.streams.management.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Service_Publish_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _Service_GetEvent_Handler,
		},
		{
			MethodName: "GetLastEvent",
			Handler:    _Service_GetLastEvent_Handler,
		},
		{
			MethodName: "GetLastHandledEvent",
			Handler:    _Service_GetLastHandledEvent_Handler,
		},
		{
			MethodName: "GetLastEventByTypes",
			Handler:    _Service_GetLastEventByTypes_Handler,
		},
		{
			MethodName: "PaginateEvents",
			Handler:    _Service_PaginateEvents_Handler,
		},
		{
			MethodName: "PaginateEventsAfterEventId",
			Handler:    _Service_PaginateEventsAfterEventId_Handler,
		},
		{
			MethodName: "IsStreamEmpty",
			Handler:    _Service_IsStreamEmpty_Handler,
		},
		{
			MethodName: "PaginateStream",
			Handler:    _Service_PaginateStream_Handler,
		},
		{
			MethodName: "PaginateStreamAfterEventId",
			Handler:    _Service_PaginateStreamAfterEventId_Handler,
		},
		{
			MethodName: "IntroduceGdprOnEventField",
			Handler:    _Service_IntroduceGdprOnEventField_Handler,
		},
		{
			MethodName: "InvalidateGdpr",
			Handler:    _Service_InvalidateGdpr_Handler,
		},
		{
			MethodName: "CreateStreamSnapshot",
			Handler:    _Service_CreateStreamSnapshot_Handler,
		},
		{
			MethodName: "RenameEventType",
			Handler:    _Service_RenameEventType_Handler,
		},
		{
			MethodName: "WaitForTransactionalConsistency",
			Handler:    _Service_WaitForTransactionalConsistency_Handler,
		},
		{
			MethodName: "Backchannel",
			Handler:    _Service_Backchannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Service_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streams/management/service.proto",
}
