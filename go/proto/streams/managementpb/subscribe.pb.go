// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: streams/management/subscribe.proto

package managementpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeRequest struct {
	state              protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Payload isSubscribeRequest_Payload `protobuf_oneof:"payload"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_streams_management_subscribe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscribeRequest) GetSubscribe() *Subscribe {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*subscribeRequest_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *SubscribeRequest) GetHandled() *Handled {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*subscribeRequest_Handled); ok {
			return x.Handled
		}
	}
	return nil
}

func (x *SubscribeRequest) SetSubscribe(v *Subscribe) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &subscribeRequest_Subscribe{v}
}

func (x *SubscribeRequest) SetHandled(v *Handled) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &subscribeRequest_Handled{v}
}

func (x *SubscribeRequest) HasPayload() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Payload != nil
}

func (x *SubscribeRequest) HasSubscribe() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*subscribeRequest_Subscribe)
	return ok
}

func (x *SubscribeRequest) HasHandled() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*subscribeRequest_Handled)
	return ok
}

func (x *SubscribeRequest) ClearPayload() {
	x.xxx_hidden_Payload = nil
}

func (x *SubscribeRequest) ClearSubscribe() {
	if _, ok := x.xxx_hidden_Payload.(*subscribeRequest_Subscribe); ok {
		x.xxx_hidden_Payload = nil
	}
}

func (x *SubscribeRequest) ClearHandled() {
	if _, ok := x.xxx_hidden_Payload.(*subscribeRequest_Handled); ok {
		x.xxx_hidden_Payload = nil
	}
}

const SubscribeRequest_Payload_not_set_case case_SubscribeRequest_Payload = 0
const SubscribeRequest_Subscribe_case case_SubscribeRequest_Payload = 1
const SubscribeRequest_Handled_case case_SubscribeRequest_Payload = 2

func (x *SubscribeRequest) WhichPayload() case_SubscribeRequest_Payload {
	if x == nil {
		return SubscribeRequest_Payload_not_set_case
	}
	switch x.xxx_hidden_Payload.(type) {
	case *subscribeRequest_Subscribe:
		return SubscribeRequest_Subscribe_case
	case *subscribeRequest_Handled:
		return SubscribeRequest_Handled_case
	default:
		return SubscribeRequest_Payload_not_set_case
	}
}

type SubscribeRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Events have to be requeued in case of:
	// - connection is closed before Handled message is received
	// - NotHandled message is received

	// Fields of oneof xxx_hidden_Payload:
	// If not received within timeout after stream is opened, the stream is closed by the server.
	Subscribe *Subscribe
	// The client sends a Handled message as soon as the current event of a tenants topic is successfully handled.
	// The client sends a Handled message with error when it failed to handle the current event of a tenants topic.
	// The server will panic if no subscriber is able to handle an event, this will increase awareness of implementation errors.
	Handled *Handled
	// -- end of xxx_hidden_Payload
}

func (b0 SubscribeRequest_builder) Build() *SubscribeRequest {
	m0 := &SubscribeRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Subscribe != nil {
		x.xxx_hidden_Payload = &subscribeRequest_Subscribe{b.Subscribe}
	}
	if b.Handled != nil {
		x.xxx_hidden_Payload = &subscribeRequest_Handled{b.Handled}
	}
	return m0
}

type case_SubscribeRequest_Payload protoreflect.FieldNumber

func (x case_SubscribeRequest_Payload) String() string {
	md := file_streams_management_subscribe_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSubscribeRequest_Payload interface {
	isSubscribeRequest_Payload()
}

type subscribeRequest_Subscribe struct {
	// If not received within timeout after stream is opened, the stream is closed by the server.
	Subscribe *Subscribe `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type subscribeRequest_Handled struct {
	// The client sends a Handled message as soon as the current event of a tenants topic is successfully handled.
	// The client sends a Handled message with error when it failed to handle the current event of a tenants topic.
	// The server will panic if no subscriber is able to handle an event, this will increase awareness of implementation errors.
	Handled *Handled `protobuf:"bytes,2,opt,name=handled,proto3,oneof"`
}

func (*subscribeRequest_Subscribe) isSubscribeRequest_Payload() {}

func (*subscribeRequest_Handled) isSubscribeRequest_Payload() {}

type Subscribe struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Metadata *SubscribeMetadata     `protobuf:"bytes,1,opt,name=metadata,proto3"`
	xxx_hidden_Topics   []string               `protobuf:"bytes,2,rep,name=topics,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Subscribe) Reset() {
	*x = Subscribe{}
	mi := &file_streams_management_subscribe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribe) ProtoMessage() {}

func (x *Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Subscribe) GetMetadata() *SubscribeMetadata {
	if x != nil {
		return x.xxx_hidden_Metadata
	}
	return nil
}

func (x *Subscribe) GetTopics() []string {
	if x != nil {
		return x.xxx_hidden_Topics
	}
	return nil
}

func (x *Subscribe) SetMetadata(v *SubscribeMetadata) {
	x.xxx_hidden_Metadata = v
}

func (x *Subscribe) SetTopics(v []string) {
	x.xxx_hidden_Topics = v
}

func (x *Subscribe) HasMetadata() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Metadata != nil
}

func (x *Subscribe) ClearMetadata() {
	x.xxx_hidden_Metadata = nil
}

type Subscribe_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Metadata *SubscribeMetadata
	Topics   []string
}

func (b0 Subscribe_builder) Build() *Subscribe {
	m0 := &Subscribe{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Metadata = b.Metadata
	x.xxx_hidden_Topics = b.Topics
	return m0
}

type SubscribeMetadata struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Group        string                 `protobuf:"bytes,1,opt,name=group,proto3"`
	xxx_hidden_SubscriberId string                 `protobuf:"bytes,2,opt,name=subscriber_id,json=subscriberId,proto3"`
	xxx_hidden_DeploymentId int64                  `protobuf:"varint,3,opt,name=deployment_id,json=deploymentId,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SubscribeMetadata) Reset() {
	*x = SubscribeMetadata{}
	mi := &file_streams_management_subscribe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMetadata) ProtoMessage() {}

func (x *SubscribeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscribeMetadata) GetGroup() string {
	if x != nil {
		return x.xxx_hidden_Group
	}
	return ""
}

func (x *SubscribeMetadata) GetSubscriberId() string {
	if x != nil {
		return x.xxx_hidden_SubscriberId
	}
	return ""
}

func (x *SubscribeMetadata) GetDeploymentId() int64 {
	if x != nil {
		return x.xxx_hidden_DeploymentId
	}
	return 0
}

func (x *SubscribeMetadata) SetGroup(v string) {
	x.xxx_hidden_Group = v
}

func (x *SubscribeMetadata) SetSubscriberId(v string) {
	x.xxx_hidden_SubscriberId = v
}

func (x *SubscribeMetadata) SetDeploymentId(v int64) {
	x.xxx_hidden_DeploymentId = v
}

type SubscribeMetadata_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Group        string
	SubscriberId string
	// when a deployment_id (!= 0) is provided the event will only be handled by subscriptions with a deployment_id that is equal or higher than the events deployment_id.
	DeploymentId int64
}

func (b0 SubscribeMetadata_builder) Build() *SubscribeMetadata {
	m0 := &SubscribeMetadata{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Group = b.Group
	x.xxx_hidden_SubscriberId = b.SubscriberId
	x.xxx_hidden_DeploymentId = b.DeploymentId
	return m0
}

type Handled struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_TenantId string                 `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3"`
	xxx_hidden_Topic    string                 `protobuf:"bytes,2,opt,name=topic,proto3"`
	xxx_hidden_Error    string                 `protobuf:"bytes,3,opt,name=error,proto3"`
	xxx_hidden_Retry    bool                   `protobuf:"varint,4,opt,name=retry,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Handled) Reset() {
	*x = Handled{}
	mi := &file_streams_management_subscribe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handled) ProtoMessage() {}

func (x *Handled) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Handled) GetTenantId() string {
	if x != nil {
		return x.xxx_hidden_TenantId
	}
	return ""
}

func (x *Handled) GetTopic() string {
	if x != nil {
		return x.xxx_hidden_Topic
	}
	return ""
}

func (x *Handled) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *Handled) GetRetry() bool {
	if x != nil {
		return x.xxx_hidden_Retry
	}
	return false
}

func (x *Handled) SetTenantId(v string) {
	x.xxx_hidden_TenantId = v
}

func (x *Handled) SetTopic(v string) {
	x.xxx_hidden_Topic = v
}

func (x *Handled) SetError(v string) {
	x.xxx_hidden_Error = v
}

func (x *Handled) SetRetry(v bool) {
	x.xxx_hidden_Retry = v
}

type Handled_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	TenantId string
	Topic    string
	Error    string
	Retry    bool
}

func (b0 Handled_builder) Build() *Handled {
	m0 := &Handled{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_TenantId = b.TenantId
	x.xxx_hidden_Topic = b.Topic
	x.xxx_hidden_Error = b.Error
	x.xxx_hidden_Retry = b.Retry
	return m0
}

// responses
type SubscribeResponse struct {
	state              protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Payload isSubscribeResponse_Payload `protobuf_oneof:"payload"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_streams_management_subscribe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SubscribeResponse) GetSubscribed() *Subscribed {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*subscribeResponse_Subscribed); ok {
			return x.Subscribed
		}
	}
	return nil
}

func (x *SubscribeResponse) GetPanic() *Panic {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*subscribeResponse_Panic); ok {
			return x.Panic
		}
	}
	return nil
}

func (x *SubscribeResponse) GetEvent() *Event {
	if x != nil {
		if x, ok := x.xxx_hidden_Payload.(*subscribeResponse_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *SubscribeResponse) SetSubscribed(v *Subscribed) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &subscribeResponse_Subscribed{v}
}

func (x *SubscribeResponse) SetPanic(v *Panic) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &subscribeResponse_Panic{v}
}

func (x *SubscribeResponse) SetEvent(v *Event) {
	if v == nil {
		x.xxx_hidden_Payload = nil
		return
	}
	x.xxx_hidden_Payload = &subscribeResponse_Event{v}
}

func (x *SubscribeResponse) HasPayload() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Payload != nil
}

func (x *SubscribeResponse) HasSubscribed() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*subscribeResponse_Subscribed)
	return ok
}

func (x *SubscribeResponse) HasPanic() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*subscribeResponse_Panic)
	return ok
}

func (x *SubscribeResponse) HasEvent() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Payload.(*subscribeResponse_Event)
	return ok
}

func (x *SubscribeResponse) ClearPayload() {
	x.xxx_hidden_Payload = nil
}

func (x *SubscribeResponse) ClearSubscribed() {
	if _, ok := x.xxx_hidden_Payload.(*subscribeResponse_Subscribed); ok {
		x.xxx_hidden_Payload = nil
	}
}

func (x *SubscribeResponse) ClearPanic() {
	if _, ok := x.xxx_hidden_Payload.(*subscribeResponse_Panic); ok {
		x.xxx_hidden_Payload = nil
	}
}

func (x *SubscribeResponse) ClearEvent() {
	if _, ok := x.xxx_hidden_Payload.(*subscribeResponse_Event); ok {
		x.xxx_hidden_Payload = nil
	}
}

const SubscribeResponse_Payload_not_set_case case_SubscribeResponse_Payload = 0
const SubscribeResponse_Subscribed_case case_SubscribeResponse_Payload = 1
const SubscribeResponse_Panic_case case_SubscribeResponse_Payload = 2
const SubscribeResponse_Event_case case_SubscribeResponse_Payload = 3

func (x *SubscribeResponse) WhichPayload() case_SubscribeResponse_Payload {
	if x == nil {
		return SubscribeResponse_Payload_not_set_case
	}
	switch x.xxx_hidden_Payload.(type) {
	case *subscribeResponse_Subscribed:
		return SubscribeResponse_Subscribed_case
	case *subscribeResponse_Panic:
		return SubscribeResponse_Panic_case
	case *subscribeResponse_Event:
		return SubscribeResponse_Event_case
	default:
		return SubscribeResponse_Payload_not_set_case
	}
}

type SubscribeResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Fields of oneof xxx_hidden_Payload:
	Subscribed *Subscribed
	Panic      *Panic
	Event      *Event
	// -- end of xxx_hidden_Payload
}

func (b0 SubscribeResponse_builder) Build() *SubscribeResponse {
	m0 := &SubscribeResponse{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Subscribed != nil {
		x.xxx_hidden_Payload = &subscribeResponse_Subscribed{b.Subscribed}
	}
	if b.Panic != nil {
		x.xxx_hidden_Payload = &subscribeResponse_Panic{b.Panic}
	}
	if b.Event != nil {
		x.xxx_hidden_Payload = &subscribeResponse_Event{b.Event}
	}
	return m0
}

type case_SubscribeResponse_Payload protoreflect.FieldNumber

func (x case_SubscribeResponse_Payload) String() string {
	md := file_streams_management_subscribe_proto_msgTypes[4].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isSubscribeResponse_Payload interface {
	isSubscribeResponse_Payload()
}

type subscribeResponse_Subscribed struct {
	Subscribed *Subscribed `protobuf:"bytes,1,opt,name=subscribed,proto3,oneof"`
}

type subscribeResponse_Panic struct {
	Panic *Panic `protobuf:"bytes,2,opt,name=panic,proto3,oneof"`
}

type subscribeResponse_Event struct {
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3,oneof"`
}

func (*subscribeResponse_Subscribed) isSubscribeResponse_Payload() {}

func (*subscribeResponse_Panic) isSubscribeResponse_Payload() {}

func (*subscribeResponse_Event) isSubscribeResponse_Payload() {}

// The server will send a Subscribed in response to a new subscription.
// In case of errors the error field is populated with a corresponding error message.
// If the client does not receive this message within 5 sek after sending the Subscribe message, the stream is closed by the client.
type Subscribed struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Error string                 `protobuf:"bytes,1,opt,name=error,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Subscribed) Reset() {
	*x = Subscribed{}
	mi := &file_streams_management_subscribe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscribed) ProtoMessage() {}

func (x *Subscribed) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Subscribed) GetError() string {
	if x != nil {
		return x.xxx_hidden_Error
	}
	return ""
}

func (x *Subscribed) SetError(v string) {
	x.xxx_hidden_Error = v
}

type Subscribed_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The client will close the stream and retry the subscription non empty errors.
	Error string
}

func (b0 Subscribed_builder) Build() *Subscribed {
	m0 := &Subscribed{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Error = b.Error
	return m0
}

// The server will send a Panic message when no other subscription was able to sucessfully handle an event.
// Clients offer hooks that allow apps to observe panics and perform actions.
type Panic struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Reason string                 `protobuf:"bytes,1,opt,name=reason,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Panic) Reset() {
	*x = Panic{}
	mi := &file_streams_management_subscribe_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Panic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Panic) ProtoMessage() {}

func (x *Panic) ProtoReflect() protoreflect.Message {
	mi := &file_streams_management_subscribe_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Panic) GetReason() string {
	if x != nil {
		return x.xxx_hidden_Reason
	}
	return ""
}

func (x *Panic) SetReason(v string) {
	x.xxx_hidden_Reason = v
}

type Panic_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Reason string
}

func (b0 Panic_builder) Build() *Panic {
	m0 := &Panic{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Reason = b.Reason
	return m0
}

var File_streams_management_subscribe_proto protoreflect.FileDescriptor

const file_streams_management_subscribe_proto_rawDesc = "" +
	"\n" +
	"\"streams/management/subscribe.proto\x12\x18freym.streams.management\x1a\x1estreams/management/event.proto\"\xa1\x01\n" +
	"\x10SubscribeRequest\x12C\n" +
	"\tsubscribe\x18\x01 \x01(\v2#.freym.streams.management.SubscribeH\x00R\tsubscribe\x12=\n" +
	"\ahandled\x18\x02 \x01(\v2!.freym.streams.management.HandledH\x00R\ahandledB\t\n" +
	"\apayload\"l\n" +
	"\tSubscribe\x12G\n" +
	"\bmetadata\x18\x01 \x01(\v2+.freym.streams.management.SubscribeMetadataR\bmetadata\x12\x16\n" +
	"\x06topics\x18\x02 \x03(\tR\x06topics\"s\n" +
	"\x11SubscribeMetadata\x12\x14\n" +
	"\x05group\x18\x01 \x01(\tR\x05group\x12#\n" +
	"\rsubscriber_id\x18\x02 \x01(\tR\fsubscriberId\x12#\n" +
	"\rdeployment_id\x18\x03 \x01(\x03R\fdeploymentId\"h\n" +
	"\aHandled\x12\x1b\n" +
	"\ttenant_id\x18\x01 \x01(\tR\btenantId\x12\x14\n" +
	"\x05topic\x18\x02 \x01(\tR\x05topic\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x14\n" +
	"\x05retry\x18\x04 \x01(\bR\x05retry\"\xd8\x01\n" +
	"\x11SubscribeResponse\x12F\n" +
	"\n" +
	"subscribed\x18\x01 \x01(\v2$.freym.streams.management.SubscribedH\x00R\n" +
	"subscribed\x127\n" +
	"\x05panic\x18\x02 \x01(\v2\x1f.freym.streams.management.PanicH\x00R\x05panic\x127\n" +
	"\x05event\x18\x03 \x01(\v2\x1f.freym.streams.management.EventH\x00R\x05eventB\t\n" +
	"\apayload\"\"\n" +
	"\n" +
	"Subscribed\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"\x1f\n" +
	"\x05Panic\x12\x16\n" +
	"\x06reason\x18\x01 \x01(\tR\x06reasonb\x06proto3"

var file_streams_management_subscribe_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_streams_management_subscribe_proto_goTypes = []any{
	(*SubscribeRequest)(nil),  // 0: freym.streams.management.SubscribeRequest
	(*Subscribe)(nil),         // 1: freym.streams.management.Subscribe
	(*SubscribeMetadata)(nil), // 2: freym.streams.management.SubscribeMetadata
	(*Handled)(nil),           // 3: freym.streams.management.Handled
	(*SubscribeResponse)(nil), // 4: freym.streams.management.SubscribeResponse
	(*Subscribed)(nil),        // 5: freym.streams.management.Subscribed
	(*Panic)(nil),             // 6: freym.streams.management.Panic
	(*Event)(nil),             // 7: freym.streams.management.Event
}
var file_streams_management_subscribe_proto_depIdxs = []int32{
	1, // 0: freym.streams.management.SubscribeRequest.subscribe:type_name -> freym.streams.management.Subscribe
	3, // 1: freym.streams.management.SubscribeRequest.handled:type_name -> freym.streams.management.Handled
	2, // 2: freym.streams.management.Subscribe.metadata:type_name -> freym.streams.management.SubscribeMetadata
	5, // 3: freym.streams.management.SubscribeResponse.subscribed:type_name -> freym.streams.management.Subscribed
	6, // 4: freym.streams.management.SubscribeResponse.panic:type_name -> freym.streams.management.Panic
	7, // 5: freym.streams.management.SubscribeResponse.event:type_name -> freym.streams.management.Event
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_streams_management_subscribe_proto_init() }
func file_streams_management_subscribe_proto_init() {
	if File_streams_management_subscribe_proto != nil {
		return
	}
	file_streams_management_event_proto_init()
	file_streams_management_subscribe_proto_msgTypes[0].OneofWrappers = []any{
		(*subscribeRequest_Subscribe)(nil),
		(*subscribeRequest_Handled)(nil),
	}
	file_streams_management_subscribe_proto_msgTypes[4].OneofWrappers = []any{
		(*subscribeResponse_Subscribed)(nil),
		(*subscribeResponse_Panic)(nil),
		(*subscribeResponse_Event)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_streams_management_subscribe_proto_rawDesc), len(file_streams_management_subscribe_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_streams_management_subscribe_proto_goTypes,
		DependencyIndexes: file_streams_management_subscribe_proto_depIdxs,
		MessageInfos:      file_streams_management_subscribe_proto_msgTypes,
	}.Build()
	File_streams_management_subscribe_proto = out.File
	file_streams_management_subscribe_proto_goTypes = nil
	file_streams_management_subscribe_proto_depIdxs = nil
}
