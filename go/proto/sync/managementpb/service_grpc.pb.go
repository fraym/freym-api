// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: sync/management/service.proto

package managementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_CreateLease_FullMethodName  = "/freym.sync.management.Service/CreateLease"
	Service_KeepLease_FullMethodName    = "/freym.sync.management.Service/KeepLease"
	Service_DropLease_FullMethodName    = "/freym.sync.management.Service/DropLease"
	Service_GetPeerNodes_FullMethodName = "/freym.sync.management.Service/GetPeerNodes"
	Service_Lock_FullMethodName         = "/freym.sync.management.Service/Lock"
	Service_TryLock_FullMethodName      = "/freym.sync.management.Service/TryLock"
	Service_Unlock_FullMethodName       = "/freym.sync.management.Service/Unlock"
	Service_RLock_FullMethodName        = "/freym.sync.management.Service/RLock"
	Service_TryRLock_FullMethodName     = "/freym.sync.management.Service/TryRLock"
	Service_RUnlock_FullMethodName      = "/freym.sync.management.Service/RUnlock"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreateLease(ctx context.Context, in *CreateLeaseRequest, opts ...grpc.CallOption) (*CreateLeaseResponse, error)
	KeepLease(ctx context.Context, in *KeepLeaseRequest, opts ...grpc.CallOption) (*KeepLeaseResponse, error)
	DropLease(ctx context.Context, in *DropLeaseRequest, opts ...grpc.CallOption) (*DropLeaseResponse, error)
	GetPeerNodes(ctx context.Context, in *GetPeerNodesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPeerNodesResponse], error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	TryLock(ctx context.Context, in *TryLockRequest, opts ...grpc.CallOption) (*TryLockResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	RLock(ctx context.Context, in *RLockRequest, opts ...grpc.CallOption) (*RLockResponse, error)
	TryRLock(ctx context.Context, in *TryRLockRequest, opts ...grpc.CallOption) (*TryRLockResponse, error)
	RUnlock(ctx context.Context, in *RUnlockRequest, opts ...grpc.CallOption) (*RUnlockResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateLease(ctx context.Context, in *CreateLeaseRequest, opts ...grpc.CallOption) (*CreateLeaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLeaseResponse)
	err := c.cc.Invoke(ctx, Service_CreateLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) KeepLease(ctx context.Context, in *KeepLeaseRequest, opts ...grpc.CallOption) (*KeepLeaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepLeaseResponse)
	err := c.cc.Invoke(ctx, Service_KeepLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DropLease(ctx context.Context, in *DropLeaseRequest, opts ...grpc.CallOption) (*DropLeaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropLeaseResponse)
	err := c.cc.Invoke(ctx, Service_DropLease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetPeerNodes(ctx context.Context, in *GetPeerNodesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPeerNodesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_GetPeerNodes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPeerNodesRequest, GetPeerNodesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_GetPeerNodesClient = grpc.ServerStreamingClient[GetPeerNodesResponse]

func (c *serviceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, Service_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TryLock(ctx context.Context, in *TryLockRequest, opts ...grpc.CallOption) (*TryLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryLockResponse)
	err := c.cc.Invoke(ctx, Service_TryLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, Service_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RLock(ctx context.Context, in *RLockRequest, opts ...grpc.CallOption) (*RLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RLockResponse)
	err := c.cc.Invoke(ctx, Service_RLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TryRLock(ctx context.Context, in *TryRLockRequest, opts ...grpc.CallOption) (*TryRLockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TryRLockResponse)
	err := c.cc.Invoke(ctx, Service_TryRLock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RUnlock(ctx context.Context, in *RUnlockRequest, opts ...grpc.CallOption) (*RUnlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RUnlockResponse)
	err := c.cc.Invoke(ctx, Service_RUnlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	CreateLease(context.Context, *CreateLeaseRequest) (*CreateLeaseResponse, error)
	KeepLease(context.Context, *KeepLeaseRequest) (*KeepLeaseResponse, error)
	DropLease(context.Context, *DropLeaseRequest) (*DropLeaseResponse, error)
	GetPeerNodes(*GetPeerNodesRequest, grpc.ServerStreamingServer[GetPeerNodesResponse]) error
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	TryLock(context.Context, *TryLockRequest) (*TryLockResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	RLock(context.Context, *RLockRequest) (*RLockResponse, error)
	TryRLock(context.Context, *TryRLockRequest) (*TryRLockResponse, error)
	RUnlock(context.Context, *RUnlockRequest) (*RUnlockResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) CreateLease(context.Context, *CreateLeaseRequest) (*CreateLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLease not implemented")
}
func (UnimplementedServiceServer) KeepLease(context.Context, *KeepLeaseRequest) (*KeepLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepLease not implemented")
}
func (UnimplementedServiceServer) DropLease(context.Context, *DropLeaseRequest) (*DropLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropLease not implemented")
}
func (UnimplementedServiceServer) GetPeerNodes(*GetPeerNodesRequest, grpc.ServerStreamingServer[GetPeerNodesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPeerNodes not implemented")
}
func (UnimplementedServiceServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedServiceServer) TryLock(context.Context, *TryLockRequest) (*TryLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryLock not implemented")
}
func (UnimplementedServiceServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedServiceServer) RLock(context.Context, *RLockRequest) (*RLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RLock not implemented")
}
func (UnimplementedServiceServer) TryRLock(context.Context, *TryRLockRequest) (*TryRLockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryRLock not implemented")
}
func (UnimplementedServiceServer) RUnlock(context.Context, *RUnlockRequest) (*RUnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RUnlock not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreateLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateLease(ctx, req.(*CreateLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_KeepLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).KeepLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_KeepLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).KeepLease(ctx, req.(*KeepLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DropLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DropLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DropLease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DropLease(ctx, req.(*DropLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetPeerNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPeerNodesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).GetPeerNodes(m, &grpc.GenericServerStream[GetPeerNodesRequest, GetPeerNodesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Service_GetPeerNodesServer = grpc.ServerStreamingServer[GetPeerNodesResponse]

func _Service_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_TryLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TryLock(ctx, req.(*TryLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RLock(ctx, req.(*RLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TryRLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TryRLockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TryRLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_TryRLock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TryRLock(ctx, req.(*TryRLockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RUnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_RUnlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RUnlock(ctx, req.(*RUnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "freym.sync.management.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLease",
			Handler:    _Service_CreateLease_Handler,
		},
		{
			MethodName: "KeepLease",
			Handler:    _Service_KeepLease_Handler,
		},
		{
			MethodName: "DropLease",
			Handler:    _Service_DropLease_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Service_Lock_Handler,
		},
		{
			MethodName: "TryLock",
			Handler:    _Service_TryLock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Service_Unlock_Handler,
		},
		{
			MethodName: "RLock",
			Handler:    _Service_RLock_Handler,
		},
		{
			MethodName: "TryRLock",
			Handler:    _Service_TryRLock_Handler,
		},
		{
			MethodName: "RUnlock",
			Handler:    _Service_RUnlock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPeerNodes",
			Handler:       _Service_GetPeerNodes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sync/management/service.proto",
}
